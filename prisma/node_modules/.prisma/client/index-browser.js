
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  streamer: 'streamer',
  createdAt: 'createdAt',
  status: 'status'
});

exports.Prisma.AnimationScalarFieldEnum = makeEnum({
  id: 'id',
  streamer: 'streamer',
  size: 'size',
  color: 'color'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  streamer: 'streamer',
  name: 'name'
});

exports.Prisma.DonationScalarFieldEnum = makeEnum({
  id: 'id',
  streamer: 'streamer',
  amount: 'amount',
  message: 'message',
  displayTimeSeconds: 'displayTimeSeconds',
  subaddress: 'subaddress',
  confirmations: 'confirmations',
  giphyUrl: 'giphyUrl',
  donor: 'donor',
  timestamp: 'timestamp'
});

exports.Prisma.Donation_settingsScalarFieldEnum = makeEnum({
  streamer: 'streamer',
  secondPrice: 'secondPrice',
  charPrice: 'charPrice',
  charLimit: 'charLimit',
  minAmount: 'minAmount',
  gifsMinAmount: 'gifsMinAmount',
  goal: 'goal',
  goalProgress: 'goalProgress',
  goalReached: 'goalReached'
});

exports.Prisma.InvoiceScalarFieldEnum = makeEnum({
  id: 'id',
  streamer: 'streamer',
  startDate: 'startDate',
  endDate: 'endDate',
  planType: 'planType',
  paidStatus: 'paidStatus',
  subaddress: 'subaddress'
});

exports.Prisma.StreamScalarFieldEnum = makeEnum({
  streamer: 'streamer',
  url: 'url',
  platform: 'platform',
  language: 'language',
  category: 'category'
});

exports.Prisma.StreamerScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  alias: 'alias',
  socket: 'socket',
  updatedAt: 'updatedAt',
  isOnline: 'isOnline',
  status: 'status'
});

exports.Prisma.WalletScalarFieldEnum = makeEnum({
  streamer: 'streamer',
  restoreHeight: 'restoreHeight',
  lastSyncHeight: 'lastSyncHeight'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Statuses = makeEnum({
  active: 'active',
  closed: 'closed'
});

exports.Categories = makeEnum({
  Gaming: 'Gaming',
  Learning: 'Learning',
  Talk: 'Talk',
  Erotics: 'Erotics'
});

exports.Plan_types = makeEnum({
  basic: 'basic',
  premium: 'premium'
});

exports.Paid_statuses = makeEnum({
  paid: 'paid',
  unpaid: 'unpaid',
  canceled: 'canceled'
});

exports.Platforms = makeEnum({
  YouTube: 'YouTube',
  Twitch: 'Twitch',
  Chaturbate: 'Chaturbate',
  Selfhosted: 'Selfhosted'
});

exports.Languages = makeEnum({
  English: 'English',
  German: 'German',
  French: 'French',
  Italian: 'Italian'
});

exports.Prisma.ModelName = makeEnum({
  Account: 'Account',
  Animation: 'Animation',
  Category: 'Category',
  Donation: 'Donation',
  Donation_settings: 'Donation_settings',
  Invoice: 'Invoice',
  Stream: 'Stream',
  Streamer: 'Streamer',
  Wallet: 'Wallet'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
