
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Account
 * 
 */
export type Account = {
  streamer: string
  createdAt: Date
  status: Statuses | null
}

/**
 * Model Animation
 * 
 */
export type Animation = {
  id: number
  streamer: string | null
  size: number | null
  color: string | null
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  streamer: string | null
  name: Categories | null
}

/**
 * Model Donation
 * 
 */
export type Donation = {
  id: number
  streamer: string | null
  amount: number
  message: string | null
  displayTimeSeconds: number | null
  subaddress: string | null
  confirmations: number | null
  giphyUrl: string | null
  donor: string | null
  timestamp: Date | null
}

/**
 * Model Donation_settings
 * 
 */
export type Donation_settings = {
  streamer: string
  secondPrice: number | null
  charPrice: number | null
  charLimit: number | null
  minAmount: number | null
  gifsMinAmount: number | null
  goal: number | null
  goalProgress: number | null
  goalReached: boolean | null
}

/**
 * Model Invoice
 * 
 */
export type Invoice = {
  id: number
  streamer: string | null
  startDate: Date | null
  endDate: Date | null
  planType: Plan_types | null
  paidStatus: Paid_statuses | null
  subaddress: string | null
}

/**
 * Model Stream
 * 
 */
export type Stream = {
  streamer: string
  url: string | null
  platform: Platforms | null
  language: Languages | null
  category: number | null
}

/**
 * Model Streamer
 * 
 */
export type Streamer = {
  id: string
  name: string
  alias: string
  socket: string | null
  updatedAt: Date
  isOnline: boolean
  status: Statuses | null
}

/**
 * Model Wallet
 * 
 */
export type Wallet = {
  streamer: string
  restoreHeight: number | null
  lastSyncHeight: number | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Statuses: {
  active: 'active',
  closed: 'closed'
};

export type Statuses = (typeof Statuses)[keyof typeof Statuses]


export const Categories: {
  Gaming: 'Gaming',
  Learning: 'Learning',
  Talk: 'Talk',
  Erotics: 'Erotics'
};

export type Categories = (typeof Categories)[keyof typeof Categories]


export const Plan_types: {
  basic: 'basic',
  premium: 'premium'
};

export type Plan_types = (typeof Plan_types)[keyof typeof Plan_types]


export const Paid_statuses: {
  paid: 'paid',
  unpaid: 'unpaid',
  canceled: 'canceled'
};

export type Paid_statuses = (typeof Paid_statuses)[keyof typeof Paid_statuses]


export const Platforms: {
  YouTube: 'YouTube',
  Twitch: 'Twitch',
  Chaturbate: 'Chaturbate',
  Selfhosted: 'Selfhosted'
};

export type Platforms = (typeof Platforms)[keyof typeof Platforms]


export const Languages: {
  English: 'English',
  German: 'German',
  French: 'French',
  Italian: 'Italian'
};

export type Languages = (typeof Languages)[keyof typeof Languages]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.animation`: Exposes CRUD operations for the **Animation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Animations
    * const animations = await prisma.animation.findMany()
    * ```
    */
  get animation(): Prisma.AnimationDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.donation`: Exposes CRUD operations for the **Donation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donations
    * const donations = await prisma.donation.findMany()
    * ```
    */
  get donation(): Prisma.DonationDelegate<GlobalReject>;

  /**
   * `prisma.donation_settings`: Exposes CRUD operations for the **Donation_settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donation_settings
    * const donation_settings = await prisma.donation_settings.findMany()
    * ```
    */
  get donation_settings(): Prisma.Donation_settingsDelegate<GlobalReject>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<GlobalReject>;

  /**
   * `prisma.stream`: Exposes CRUD operations for the **Stream** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Streams
    * const streams = await prisma.stream.findMany()
    * ```
    */
  get stream(): Prisma.StreamDelegate<GlobalReject>;

  /**
   * `prisma.streamer`: Exposes CRUD operations for the **Streamer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Streamers
    * const streamers = await prisma.streamer.findMany()
    * ```
    */
  get streamer(): Prisma.StreamerDelegate<GlobalReject>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Account: 'Account',
    Animation: 'Animation',
    Category: 'Category',
    Donation: 'Donation',
    Donation_settings: 'Donation_settings',
    Invoice: 'Invoice',
    Stream: 'Stream',
    Streamer: 'Streamer',
    Wallet: 'Wallet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    stream: number
  }

  export type CategoryCountOutputTypeSelect = {
    stream?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type StreamerCountOutputType
   */


  export type StreamerCountOutputType = {
    animation: number
    category: number
    donation: number
    invoice: number
    Account: number
  }

  export type StreamerCountOutputTypeSelect = {
    animation?: boolean
    category?: boolean
    donation?: boolean
    invoice?: boolean
    Account?: boolean
  }

  export type StreamerCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StreamerCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StreamerCountOutputType
    : S extends undefined
    ? never
    : S extends StreamerCountOutputTypeArgs
    ?'include' extends U
    ? StreamerCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StreamerCountOutputType ? StreamerCountOutputType[P] : never
  } 
    : StreamerCountOutputType
  : StreamerCountOutputType




  // Custom InputTypes

  /**
   * StreamerCountOutputType without action
   */
  export type StreamerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StreamerCountOutputType
     * 
    **/
    select?: StreamerCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    streamer: string | null
    createdAt: Date | null
    status: Statuses | null
  }

  export type AccountMaxAggregateOutputType = {
    streamer: string | null
    createdAt: Date | null
    status: Statuses | null
  }

  export type AccountCountAggregateOutputType = {
    streamer: number
    createdAt: number
    status: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    streamer?: true
    createdAt?: true
    status?: true
  }

  export type AccountMaxAggregateInputType = {
    streamer?: true
    createdAt?: true
    status?: true
  }

  export type AccountCountAggregateInputType = {
    streamer?: true
    createdAt?: true
    status?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    streamer: string
    createdAt: Date
    status: Statuses | null
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    streamer?: boolean
    createdAt?: boolean
    status?: boolean
    streamer_accountTostreamer?: boolean | StreamerArgs
  }

  export type AccountInclude = {
    streamer_accountTostreamer?: boolean | StreamerArgs
  }

  export type AccountGetPayload<
    S extends boolean | null | undefined | AccountArgs,
    U = keyof S
      > = S extends true
        ? Account
    : S extends undefined
    ? never
    : S extends AccountArgs | AccountFindManyArgs
    ?'include' extends U
    ? Account  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_accountTostreamer' ? StreamerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_accountTostreamer' ? StreamerGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
    : Account
  : Account


  type AccountCountArgs = Merge<
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface AccountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `streamer`
     * const accountWithStreamerOnly = await prisma.account.findMany({ select: { streamer: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_accountTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Throw an Error if a Account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Throw an Error if a Account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     * 
    **/
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     * 
    **/
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     * 
    **/
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     * 
    **/
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     * 
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     * 
    **/
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
  }



  /**
   * Model Animation
   */


  export type AggregateAnimation = {
    _count: AnimationCountAggregateOutputType | null
    _avg: AnimationAvgAggregateOutputType | null
    _sum: AnimationSumAggregateOutputType | null
    _min: AnimationMinAggregateOutputType | null
    _max: AnimationMaxAggregateOutputType | null
  }

  export type AnimationAvgAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type AnimationSumAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type AnimationMinAggregateOutputType = {
    id: number | null
    streamer: string | null
    size: number | null
    color: string | null
  }

  export type AnimationMaxAggregateOutputType = {
    id: number | null
    streamer: string | null
    size: number | null
    color: string | null
  }

  export type AnimationCountAggregateOutputType = {
    id: number
    streamer: number
    size: number
    color: number
    _all: number
  }


  export type AnimationAvgAggregateInputType = {
    id?: true
    size?: true
  }

  export type AnimationSumAggregateInputType = {
    id?: true
    size?: true
  }

  export type AnimationMinAggregateInputType = {
    id?: true
    streamer?: true
    size?: true
    color?: true
  }

  export type AnimationMaxAggregateInputType = {
    id?: true
    streamer?: true
    size?: true
    color?: true
  }

  export type AnimationCountAggregateInputType = {
    id?: true
    streamer?: true
    size?: true
    color?: true
    _all?: true
  }

  export type AnimationAggregateArgs = {
    /**
     * Filter which Animation to aggregate.
     * 
    **/
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Animations
    **/
    _count?: true | AnimationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimationMaxAggregateInputType
  }

  export type GetAnimationAggregateType<T extends AnimationAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimation[P]>
      : GetScalarType<T[P], AggregateAnimation[P]>
  }




  export type AnimationGroupByArgs = {
    where?: AnimationWhereInput
    orderBy?: Enumerable<AnimationOrderByWithAggregationInput>
    by: Array<AnimationScalarFieldEnum>
    having?: AnimationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimationCountAggregateInputType | true
    _avg?: AnimationAvgAggregateInputType
    _sum?: AnimationSumAggregateInputType
    _min?: AnimationMinAggregateInputType
    _max?: AnimationMaxAggregateInputType
  }


  export type AnimationGroupByOutputType = {
    id: number
    streamer: string | null
    size: number | null
    color: string | null
    _count: AnimationCountAggregateOutputType | null
    _avg: AnimationAvgAggregateOutputType | null
    _sum: AnimationSumAggregateOutputType | null
    _min: AnimationMinAggregateOutputType | null
    _max: AnimationMaxAggregateOutputType | null
  }

  type GetAnimationGroupByPayload<T extends AnimationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AnimationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimationGroupByOutputType[P]>
            : GetScalarType<T[P], AnimationGroupByOutputType[P]>
        }
      >
    >


  export type AnimationSelect = {
    id?: boolean
    streamer?: boolean
    size?: boolean
    color?: boolean
    streamer_animationTostreamer?: boolean | StreamerArgs
  }

  export type AnimationInclude = {
    streamer_animationTostreamer?: boolean | StreamerArgs
  }

  export type AnimationGetPayload<
    S extends boolean | null | undefined | AnimationArgs,
    U = keyof S
      > = S extends true
        ? Animation
    : S extends undefined
    ? never
    : S extends AnimationArgs | AnimationFindManyArgs
    ?'include' extends U
    ? Animation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_animationTostreamer' ? StreamerGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_animationTostreamer' ? StreamerGetPayload<S['select'][P]> | null :  P extends keyof Animation ? Animation[P] : never
  } 
    : Animation
  : Animation


  type AnimationCountArgs = Merge<
    Omit<AnimationFindManyArgs, 'select' | 'include'> & {
      select?: AnimationCountAggregateInputType | true
    }
  >

  export interface AnimationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Animation that matches the filter.
     * @param {AnimationFindUniqueArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnimationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnimationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Animation'> extends True ? CheckSelect<T, Prisma__AnimationClient<Animation>, Prisma__AnimationClient<AnimationGetPayload<T>>> : CheckSelect<T, Prisma__AnimationClient<Animation | null >, Prisma__AnimationClient<AnimationGetPayload<T> | null >>

    /**
     * Find the first Animation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindFirstArgs} args - Arguments to find a Animation
     * @example
     * // Get one Animation
     * const animation = await prisma.animation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnimationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnimationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Animation'> extends True ? CheckSelect<T, Prisma__AnimationClient<Animation>, Prisma__AnimationClient<AnimationGetPayload<T>>> : CheckSelect<T, Prisma__AnimationClient<Animation | null >, Prisma__AnimationClient<AnimationGetPayload<T> | null >>

    /**
     * Find zero or more Animations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Animations
     * const animations = await prisma.animation.findMany()
     * 
     * // Get first 10 Animations
     * const animations = await prisma.animation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const animationWithIdOnly = await prisma.animation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnimationFindManyArgs>(
      args?: SelectSubset<T, AnimationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Animation>>, PrismaPromise<Array<AnimationGetPayload<T>>>>

    /**
     * Create a Animation.
     * @param {AnimationCreateArgs} args - Arguments to create a Animation.
     * @example
     * // Create one Animation
     * const Animation = await prisma.animation.create({
     *   data: {
     *     // ... data to create a Animation
     *   }
     * })
     * 
    **/
    create<T extends AnimationCreateArgs>(
      args: SelectSubset<T, AnimationCreateArgs>
    ): CheckSelect<T, Prisma__AnimationClient<Animation>, Prisma__AnimationClient<AnimationGetPayload<T>>>

    /**
     * Create many Animations.
     *     @param {AnimationCreateManyArgs} args - Arguments to create many Animations.
     *     @example
     *     // Create many Animations
     *     const animation = await prisma.animation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnimationCreateManyArgs>(
      args?: SelectSubset<T, AnimationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Animation.
     * @param {AnimationDeleteArgs} args - Arguments to delete one Animation.
     * @example
     * // Delete one Animation
     * const Animation = await prisma.animation.delete({
     *   where: {
     *     // ... filter to delete one Animation
     *   }
     * })
     * 
    **/
    delete<T extends AnimationDeleteArgs>(
      args: SelectSubset<T, AnimationDeleteArgs>
    ): CheckSelect<T, Prisma__AnimationClient<Animation>, Prisma__AnimationClient<AnimationGetPayload<T>>>

    /**
     * Update one Animation.
     * @param {AnimationUpdateArgs} args - Arguments to update one Animation.
     * @example
     * // Update one Animation
     * const animation = await prisma.animation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnimationUpdateArgs>(
      args: SelectSubset<T, AnimationUpdateArgs>
    ): CheckSelect<T, Prisma__AnimationClient<Animation>, Prisma__AnimationClient<AnimationGetPayload<T>>>

    /**
     * Delete zero or more Animations.
     * @param {AnimationDeleteManyArgs} args - Arguments to filter Animations to delete.
     * @example
     * // Delete a few Animations
     * const { count } = await prisma.animation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnimationDeleteManyArgs>(
      args?: SelectSubset<T, AnimationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Animations
     * const animation = await prisma.animation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnimationUpdateManyArgs>(
      args: SelectSubset<T, AnimationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Animation.
     * @param {AnimationUpsertArgs} args - Arguments to update or create a Animation.
     * @example
     * // Update or create a Animation
     * const animation = await prisma.animation.upsert({
     *   create: {
     *     // ... data to create a Animation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Animation we want to update
     *   }
     * })
    **/
    upsert<T extends AnimationUpsertArgs>(
      args: SelectSubset<T, AnimationUpsertArgs>
    ): CheckSelect<T, Prisma__AnimationClient<Animation>, Prisma__AnimationClient<AnimationGetPayload<T>>>

    /**
     * Count the number of Animations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationCountArgs} args - Arguments to filter Animations to count.
     * @example
     * // Count the number of Animations
     * const count = await prisma.animation.count({
     *   where: {
     *     // ... the filter for the Animations we want to count
     *   }
     * })
    **/
    count<T extends AnimationCountArgs>(
      args?: Subset<T, AnimationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Animation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimationAggregateArgs>(args: Subset<T, AnimationAggregateArgs>): PrismaPromise<GetAnimationAggregateType<T>>

    /**
     * Group by Animation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimationGroupByArgs['orderBy'] }
        : { orderBy?: AnimationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Animation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnimationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_animationTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Animation findUnique
   */
  export type AnimationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * Throw an Error if a Animation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Animation to fetch.
     * 
    **/
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation findFirst
   */
  export type AnimationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * Throw an Error if a Animation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Animation to fetch.
     * 
    **/
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animations.
     * 
    **/
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animations.
     * 
    **/
    distinct?: Enumerable<AnimationScalarFieldEnum>
  }


  /**
   * Animation findMany
   */
  export type AnimationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * Filter, which Animations to fetch.
     * 
    **/
    where?: AnimationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animations to fetch.
     * 
    **/
    orderBy?: Enumerable<AnimationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Animations.
     * 
    **/
    cursor?: AnimationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AnimationScalarFieldEnum>
  }


  /**
   * Animation create
   */
  export type AnimationCreateArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * The data needed to create a Animation.
     * 
    **/
    data: XOR<AnimationCreateInput, AnimationUncheckedCreateInput>
  }


  /**
   * Animation createMany
   */
  export type AnimationCreateManyArgs = {
    /**
     * The data used to create many Animations.
     * 
    **/
    data: Enumerable<AnimationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Animation update
   */
  export type AnimationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * The data needed to update a Animation.
     * 
    **/
    data: XOR<AnimationUpdateInput, AnimationUncheckedUpdateInput>
    /**
     * Choose, which Animation to update.
     * 
    **/
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation updateMany
   */
  export type AnimationUpdateManyArgs = {
    /**
     * The data used to update Animations.
     * 
    **/
    data: XOR<AnimationUpdateManyMutationInput, AnimationUncheckedUpdateManyInput>
    /**
     * Filter which Animations to update
     * 
    **/
    where?: AnimationWhereInput
  }


  /**
   * Animation upsert
   */
  export type AnimationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * The filter to search for the Animation to update in case it exists.
     * 
    **/
    where: AnimationWhereUniqueInput
    /**
     * In case the Animation found by the `where` argument doesn't exist, create a new Animation with this data.
     * 
    **/
    create: XOR<AnimationCreateInput, AnimationUncheckedCreateInput>
    /**
     * In case the Animation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AnimationUpdateInput, AnimationUncheckedUpdateInput>
  }


  /**
   * Animation delete
   */
  export type AnimationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
    /**
     * Filter which Animation to delete.
     * 
    **/
    where: AnimationWhereUniqueInput
  }


  /**
   * Animation deleteMany
   */
  export type AnimationDeleteManyArgs = {
    /**
     * Filter which Animations to delete
     * 
    **/
    where?: AnimationWhereInput
  }


  /**
   * Animation without action
   */
  export type AnimationArgs = {
    /**
     * Select specific fields to fetch from the Animation
     * 
    **/
    select?: AnimationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnimationInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    streamer: string | null
    name: Categories | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    streamer: string | null
    name: Categories | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    streamer: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    streamer?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    streamer?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    streamer?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    streamer: string | null
    name: Categories | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    streamer?: boolean
    name?: boolean
    streamer_categoryTostreamer?: boolean | StreamerArgs
    stream?: boolean | StreamFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    streamer_categoryTostreamer?: boolean | StreamerArgs
    stream?: boolean | StreamFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_categoryTostreamer' ? StreamerGetPayload<S['include'][P]> | null :
        P extends 'stream' ? Array < StreamGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_categoryTostreamer' ? StreamerGetPayload<S['select'][P]> | null :
        P extends 'stream' ? Array < StreamGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_categoryTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    stream<T extends StreamFindManyArgs = {}>(args?: Subset<T, StreamFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Stream>>, PrismaPromise<Array<StreamGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Donation
   */


  export type AggregateDonation = {
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  export type DonationAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    displayTimeSeconds: number | null
    confirmations: number | null
  }

  export type DonationSumAggregateOutputType = {
    id: number | null
    amount: number | null
    displayTimeSeconds: number | null
    confirmations: number | null
  }

  export type DonationMinAggregateOutputType = {
    id: number | null
    streamer: string | null
    amount: number | null
    message: string | null
    displayTimeSeconds: number | null
    subaddress: string | null
    confirmations: number | null
    giphyUrl: string | null
    donor: string | null
    timestamp: Date | null
  }

  export type DonationMaxAggregateOutputType = {
    id: number | null
    streamer: string | null
    amount: number | null
    message: string | null
    displayTimeSeconds: number | null
    subaddress: string | null
    confirmations: number | null
    giphyUrl: string | null
    donor: string | null
    timestamp: Date | null
  }

  export type DonationCountAggregateOutputType = {
    id: number
    streamer: number
    amount: number
    message: number
    displayTimeSeconds: number
    subaddress: number
    confirmations: number
    giphyUrl: number
    donor: number
    timestamp: number
    _all: number
  }


  export type DonationAvgAggregateInputType = {
    id?: true
    amount?: true
    displayTimeSeconds?: true
    confirmations?: true
  }

  export type DonationSumAggregateInputType = {
    id?: true
    amount?: true
    displayTimeSeconds?: true
    confirmations?: true
  }

  export type DonationMinAggregateInputType = {
    id?: true
    streamer?: true
    amount?: true
    message?: true
    displayTimeSeconds?: true
    subaddress?: true
    confirmations?: true
    giphyUrl?: true
    donor?: true
    timestamp?: true
  }

  export type DonationMaxAggregateInputType = {
    id?: true
    streamer?: true
    amount?: true
    message?: true
    displayTimeSeconds?: true
    subaddress?: true
    confirmations?: true
    giphyUrl?: true
    donor?: true
    timestamp?: true
  }

  export type DonationCountAggregateInputType = {
    id?: true
    streamer?: true
    amount?: true
    message?: true
    displayTimeSeconds?: true
    subaddress?: true
    confirmations?: true
    giphyUrl?: true
    donor?: true
    timestamp?: true
    _all?: true
  }

  export type DonationAggregateArgs = {
    /**
     * Filter which Donation to aggregate.
     * 
    **/
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     * 
    **/
    orderBy?: Enumerable<DonationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Donations
    **/
    _count?: true | DonationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationMaxAggregateInputType
  }

  export type GetDonationAggregateType<T extends DonationAggregateArgs> = {
        [P in keyof T & keyof AggregateDonation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonation[P]>
      : GetScalarType<T[P], AggregateDonation[P]>
  }




  export type DonationGroupByArgs = {
    where?: DonationWhereInput
    orderBy?: Enumerable<DonationOrderByWithAggregationInput>
    by: Array<DonationScalarFieldEnum>
    having?: DonationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationCountAggregateInputType | true
    _avg?: DonationAvgAggregateInputType
    _sum?: DonationSumAggregateInputType
    _min?: DonationMinAggregateInputType
    _max?: DonationMaxAggregateInputType
  }


  export type DonationGroupByOutputType = {
    id: number
    streamer: string | null
    amount: number
    message: string | null
    displayTimeSeconds: number | null
    subaddress: string | null
    confirmations: number | null
    giphyUrl: string | null
    donor: string | null
    timestamp: Date | null
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  type GetDonationGroupByPayload<T extends DonationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DonationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationGroupByOutputType[P]>
            : GetScalarType<T[P], DonationGroupByOutputType[P]>
        }
      >
    >


  export type DonationSelect = {
    id?: boolean
    streamer?: boolean
    amount?: boolean
    message?: boolean
    displayTimeSeconds?: boolean
    subaddress?: boolean
    confirmations?: boolean
    giphyUrl?: boolean
    donor?: boolean
    timestamp?: boolean
    streamer_donationTostreamer?: boolean | StreamerArgs
  }

  export type DonationInclude = {
    streamer_donationTostreamer?: boolean | StreamerArgs
  }

  export type DonationGetPayload<
    S extends boolean | null | undefined | DonationArgs,
    U = keyof S
      > = S extends true
        ? Donation
    : S extends undefined
    ? never
    : S extends DonationArgs | DonationFindManyArgs
    ?'include' extends U
    ? Donation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_donationTostreamer' ? StreamerGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_donationTostreamer' ? StreamerGetPayload<S['select'][P]> | null :  P extends keyof Donation ? Donation[P] : never
  } 
    : Donation
  : Donation


  type DonationCountArgs = Merge<
    Omit<DonationFindManyArgs, 'select' | 'include'> & {
      select?: DonationCountAggregateInputType | true
    }
  >

  export interface DonationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Donation that matches the filter.
     * @param {DonationFindUniqueArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DonationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DonationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Donation'> extends True ? CheckSelect<T, Prisma__DonationClient<Donation>, Prisma__DonationClient<DonationGetPayload<T>>> : CheckSelect<T, Prisma__DonationClient<Donation | null >, Prisma__DonationClient<DonationGetPayload<T> | null >>

    /**
     * Find the first Donation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationFindFirstArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DonationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DonationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Donation'> extends True ? CheckSelect<T, Prisma__DonationClient<Donation>, Prisma__DonationClient<DonationGetPayload<T>>> : CheckSelect<T, Prisma__DonationClient<Donation | null >, Prisma__DonationClient<DonationGetPayload<T> | null >>

    /**
     * Find zero or more Donations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donations
     * const donations = await prisma.donation.findMany()
     * 
     * // Get first 10 Donations
     * const donations = await prisma.donation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationWithIdOnly = await prisma.donation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DonationFindManyArgs>(
      args?: SelectSubset<T, DonationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Donation>>, PrismaPromise<Array<DonationGetPayload<T>>>>

    /**
     * Create a Donation.
     * @param {DonationCreateArgs} args - Arguments to create a Donation.
     * @example
     * // Create one Donation
     * const Donation = await prisma.donation.create({
     *   data: {
     *     // ... data to create a Donation
     *   }
     * })
     * 
    **/
    create<T extends DonationCreateArgs>(
      args: SelectSubset<T, DonationCreateArgs>
    ): CheckSelect<T, Prisma__DonationClient<Donation>, Prisma__DonationClient<DonationGetPayload<T>>>

    /**
     * Create many Donations.
     *     @param {DonationCreateManyArgs} args - Arguments to create many Donations.
     *     @example
     *     // Create many Donations
     *     const donation = await prisma.donation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DonationCreateManyArgs>(
      args?: SelectSubset<T, DonationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Donation.
     * @param {DonationDeleteArgs} args - Arguments to delete one Donation.
     * @example
     * // Delete one Donation
     * const Donation = await prisma.donation.delete({
     *   where: {
     *     // ... filter to delete one Donation
     *   }
     * })
     * 
    **/
    delete<T extends DonationDeleteArgs>(
      args: SelectSubset<T, DonationDeleteArgs>
    ): CheckSelect<T, Prisma__DonationClient<Donation>, Prisma__DonationClient<DonationGetPayload<T>>>

    /**
     * Update one Donation.
     * @param {DonationUpdateArgs} args - Arguments to update one Donation.
     * @example
     * // Update one Donation
     * const donation = await prisma.donation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DonationUpdateArgs>(
      args: SelectSubset<T, DonationUpdateArgs>
    ): CheckSelect<T, Prisma__DonationClient<Donation>, Prisma__DonationClient<DonationGetPayload<T>>>

    /**
     * Delete zero or more Donations.
     * @param {DonationDeleteManyArgs} args - Arguments to filter Donations to delete.
     * @example
     * // Delete a few Donations
     * const { count } = await prisma.donation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DonationDeleteManyArgs>(
      args?: SelectSubset<T, DonationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donations
     * const donation = await prisma.donation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DonationUpdateManyArgs>(
      args: SelectSubset<T, DonationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Donation.
     * @param {DonationUpsertArgs} args - Arguments to update or create a Donation.
     * @example
     * // Update or create a Donation
     * const donation = await prisma.donation.upsert({
     *   create: {
     *     // ... data to create a Donation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donation we want to update
     *   }
     * })
    **/
    upsert<T extends DonationUpsertArgs>(
      args: SelectSubset<T, DonationUpsertArgs>
    ): CheckSelect<T, Prisma__DonationClient<Donation>, Prisma__DonationClient<DonationGetPayload<T>>>

    /**
     * Count the number of Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationCountArgs} args - Arguments to filter Donations to count.
     * @example
     * // Count the number of Donations
     * const count = await prisma.donation.count({
     *   where: {
     *     // ... the filter for the Donations we want to count
     *   }
     * })
    **/
    count<T extends DonationCountArgs>(
      args?: Subset<T, DonationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationAggregateArgs>(args: Subset<T, DonationAggregateArgs>): PrismaPromise<GetDonationAggregateType<T>>

    /**
     * Group by Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationGroupByArgs['orderBy'] }
        : { orderBy?: DonationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Donation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DonationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_donationTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Donation findUnique
   */
  export type DonationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * Throw an Error if a Donation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Donation to fetch.
     * 
    **/
    where: DonationWhereUniqueInput
  }


  /**
   * Donation findFirst
   */
  export type DonationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * Throw an Error if a Donation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Donation to fetch.
     * 
    **/
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     * 
    **/
    orderBy?: Enumerable<DonationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Donations.
     * 
    **/
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Donations.
     * 
    **/
    distinct?: Enumerable<DonationScalarFieldEnum>
  }


  /**
   * Donation findMany
   */
  export type DonationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * Filter, which Donations to fetch.
     * 
    **/
    where?: DonationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donations to fetch.
     * 
    **/
    orderBy?: Enumerable<DonationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Donations.
     * 
    **/
    cursor?: DonationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DonationScalarFieldEnum>
  }


  /**
   * Donation create
   */
  export type DonationCreateArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * The data needed to create a Donation.
     * 
    **/
    data: XOR<DonationCreateInput, DonationUncheckedCreateInput>
  }


  /**
   * Donation createMany
   */
  export type DonationCreateManyArgs = {
    /**
     * The data used to create many Donations.
     * 
    **/
    data: Enumerable<DonationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Donation update
   */
  export type DonationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * The data needed to update a Donation.
     * 
    **/
    data: XOR<DonationUpdateInput, DonationUncheckedUpdateInput>
    /**
     * Choose, which Donation to update.
     * 
    **/
    where: DonationWhereUniqueInput
  }


  /**
   * Donation updateMany
   */
  export type DonationUpdateManyArgs = {
    /**
     * The data used to update Donations.
     * 
    **/
    data: XOR<DonationUpdateManyMutationInput, DonationUncheckedUpdateManyInput>
    /**
     * Filter which Donations to update
     * 
    **/
    where?: DonationWhereInput
  }


  /**
   * Donation upsert
   */
  export type DonationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * The filter to search for the Donation to update in case it exists.
     * 
    **/
    where: DonationWhereUniqueInput
    /**
     * In case the Donation found by the `where` argument doesn't exist, create a new Donation with this data.
     * 
    **/
    create: XOR<DonationCreateInput, DonationUncheckedCreateInput>
    /**
     * In case the Donation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DonationUpdateInput, DonationUncheckedUpdateInput>
  }


  /**
   * Donation delete
   */
  export type DonationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
    /**
     * Filter which Donation to delete.
     * 
    **/
    where: DonationWhereUniqueInput
  }


  /**
   * Donation deleteMany
   */
  export type DonationDeleteManyArgs = {
    /**
     * Filter which Donations to delete
     * 
    **/
    where?: DonationWhereInput
  }


  /**
   * Donation without action
   */
  export type DonationArgs = {
    /**
     * Select specific fields to fetch from the Donation
     * 
    **/
    select?: DonationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DonationInclude | null
  }



  /**
   * Model Donation_settings
   */


  export type AggregateDonation_settings = {
    _count: Donation_settingsCountAggregateOutputType | null
    _avg: Donation_settingsAvgAggregateOutputType | null
    _sum: Donation_settingsSumAggregateOutputType | null
    _min: Donation_settingsMinAggregateOutputType | null
    _max: Donation_settingsMaxAggregateOutputType | null
  }

  export type Donation_settingsAvgAggregateOutputType = {
    secondPrice: number | null
    charPrice: number | null
    charLimit: number | null
    minAmount: number | null
    gifsMinAmount: number | null
    goal: number | null
    goalProgress: number | null
  }

  export type Donation_settingsSumAggregateOutputType = {
    secondPrice: number | null
    charPrice: number | null
    charLimit: number | null
    minAmount: number | null
    gifsMinAmount: number | null
    goal: number | null
    goalProgress: number | null
  }

  export type Donation_settingsMinAggregateOutputType = {
    streamer: string | null
    secondPrice: number | null
    charPrice: number | null
    charLimit: number | null
    minAmount: number | null
    gifsMinAmount: number | null
    goal: number | null
    goalProgress: number | null
    goalReached: boolean | null
  }

  export type Donation_settingsMaxAggregateOutputType = {
    streamer: string | null
    secondPrice: number | null
    charPrice: number | null
    charLimit: number | null
    minAmount: number | null
    gifsMinAmount: number | null
    goal: number | null
    goalProgress: number | null
    goalReached: boolean | null
  }

  export type Donation_settingsCountAggregateOutputType = {
    streamer: number
    secondPrice: number
    charPrice: number
    charLimit: number
    minAmount: number
    gifsMinAmount: number
    goal: number
    goalProgress: number
    goalReached: number
    _all: number
  }


  export type Donation_settingsAvgAggregateInputType = {
    secondPrice?: true
    charPrice?: true
    charLimit?: true
    minAmount?: true
    gifsMinAmount?: true
    goal?: true
    goalProgress?: true
  }

  export type Donation_settingsSumAggregateInputType = {
    secondPrice?: true
    charPrice?: true
    charLimit?: true
    minAmount?: true
    gifsMinAmount?: true
    goal?: true
    goalProgress?: true
  }

  export type Donation_settingsMinAggregateInputType = {
    streamer?: true
    secondPrice?: true
    charPrice?: true
    charLimit?: true
    minAmount?: true
    gifsMinAmount?: true
    goal?: true
    goalProgress?: true
    goalReached?: true
  }

  export type Donation_settingsMaxAggregateInputType = {
    streamer?: true
    secondPrice?: true
    charPrice?: true
    charLimit?: true
    minAmount?: true
    gifsMinAmount?: true
    goal?: true
    goalProgress?: true
    goalReached?: true
  }

  export type Donation_settingsCountAggregateInputType = {
    streamer?: true
    secondPrice?: true
    charPrice?: true
    charLimit?: true
    minAmount?: true
    gifsMinAmount?: true
    goal?: true
    goalProgress?: true
    goalReached?: true
    _all?: true
  }

  export type Donation_settingsAggregateArgs = {
    /**
     * Filter which Donation_settings to aggregate.
     * 
    **/
    where?: Donation_settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donation_settings to fetch.
     * 
    **/
    orderBy?: Enumerable<Donation_settingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Donation_settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donation_settings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donation_settings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Donation_settings
    **/
    _count?: true | Donation_settingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Donation_settingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Donation_settingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Donation_settingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Donation_settingsMaxAggregateInputType
  }

  export type GetDonation_settingsAggregateType<T extends Donation_settingsAggregateArgs> = {
        [P in keyof T & keyof AggregateDonation_settings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonation_settings[P]>
      : GetScalarType<T[P], AggregateDonation_settings[P]>
  }




  export type Donation_settingsGroupByArgs = {
    where?: Donation_settingsWhereInput
    orderBy?: Enumerable<Donation_settingsOrderByWithAggregationInput>
    by: Array<Donation_settingsScalarFieldEnum>
    having?: Donation_settingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Donation_settingsCountAggregateInputType | true
    _avg?: Donation_settingsAvgAggregateInputType
    _sum?: Donation_settingsSumAggregateInputType
    _min?: Donation_settingsMinAggregateInputType
    _max?: Donation_settingsMaxAggregateInputType
  }


  export type Donation_settingsGroupByOutputType = {
    streamer: string
    secondPrice: number | null
    charPrice: number | null
    charLimit: number | null
    minAmount: number | null
    gifsMinAmount: number | null
    goal: number | null
    goalProgress: number | null
    goalReached: boolean | null
    _count: Donation_settingsCountAggregateOutputType | null
    _avg: Donation_settingsAvgAggregateOutputType | null
    _sum: Donation_settingsSumAggregateOutputType | null
    _min: Donation_settingsMinAggregateOutputType | null
    _max: Donation_settingsMaxAggregateOutputType | null
  }

  type GetDonation_settingsGroupByPayload<T extends Donation_settingsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Donation_settingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Donation_settingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Donation_settingsGroupByOutputType[P]>
            : GetScalarType<T[P], Donation_settingsGroupByOutputType[P]>
        }
      >
    >


  export type Donation_settingsSelect = {
    streamer?: boolean
    secondPrice?: boolean
    charPrice?: boolean
    charLimit?: boolean
    minAmount?: boolean
    gifsMinAmount?: boolean
    goal?: boolean
    goalProgress?: boolean
    goalReached?: boolean
    streamer_donation_settingsTostreamer?: boolean | StreamerArgs
  }

  export type Donation_settingsInclude = {
    streamer_donation_settingsTostreamer?: boolean | StreamerArgs
  }

  export type Donation_settingsGetPayload<
    S extends boolean | null | undefined | Donation_settingsArgs,
    U = keyof S
      > = S extends true
        ? Donation_settings
    : S extends undefined
    ? never
    : S extends Donation_settingsArgs | Donation_settingsFindManyArgs
    ?'include' extends U
    ? Donation_settings  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_donation_settingsTostreamer' ? StreamerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_donation_settingsTostreamer' ? StreamerGetPayload<S['select'][P]> :  P extends keyof Donation_settings ? Donation_settings[P] : never
  } 
    : Donation_settings
  : Donation_settings


  type Donation_settingsCountArgs = Merge<
    Omit<Donation_settingsFindManyArgs, 'select' | 'include'> & {
      select?: Donation_settingsCountAggregateInputType | true
    }
  >

  export interface Donation_settingsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Donation_settings that matches the filter.
     * @param {Donation_settingsFindUniqueArgs} args - Arguments to find a Donation_settings
     * @example
     * // Get one Donation_settings
     * const donation_settings = await prisma.donation_settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Donation_settingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Donation_settingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Donation_settings'> extends True ? CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings>, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T>>> : CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings | null >, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T> | null >>

    /**
     * Find the first Donation_settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Donation_settingsFindFirstArgs} args - Arguments to find a Donation_settings
     * @example
     * // Get one Donation_settings
     * const donation_settings = await prisma.donation_settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Donation_settingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Donation_settingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Donation_settings'> extends True ? CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings>, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T>>> : CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings | null >, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T> | null >>

    /**
     * Find zero or more Donation_settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Donation_settingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donation_settings
     * const donation_settings = await prisma.donation_settings.findMany()
     * 
     * // Get first 10 Donation_settings
     * const donation_settings = await prisma.donation_settings.findMany({ take: 10 })
     * 
     * // Only select the `streamer`
     * const donation_settingsWithStreamerOnly = await prisma.donation_settings.findMany({ select: { streamer: true } })
     * 
    **/
    findMany<T extends Donation_settingsFindManyArgs>(
      args?: SelectSubset<T, Donation_settingsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Donation_settings>>, PrismaPromise<Array<Donation_settingsGetPayload<T>>>>

    /**
     * Create a Donation_settings.
     * @param {Donation_settingsCreateArgs} args - Arguments to create a Donation_settings.
     * @example
     * // Create one Donation_settings
     * const Donation_settings = await prisma.donation_settings.create({
     *   data: {
     *     // ... data to create a Donation_settings
     *   }
     * })
     * 
    **/
    create<T extends Donation_settingsCreateArgs>(
      args: SelectSubset<T, Donation_settingsCreateArgs>
    ): CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings>, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T>>>

    /**
     * Create many Donation_settings.
     *     @param {Donation_settingsCreateManyArgs} args - Arguments to create many Donation_settings.
     *     @example
     *     // Create many Donation_settings
     *     const donation_settings = await prisma.donation_settings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Donation_settingsCreateManyArgs>(
      args?: SelectSubset<T, Donation_settingsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Donation_settings.
     * @param {Donation_settingsDeleteArgs} args - Arguments to delete one Donation_settings.
     * @example
     * // Delete one Donation_settings
     * const Donation_settings = await prisma.donation_settings.delete({
     *   where: {
     *     // ... filter to delete one Donation_settings
     *   }
     * })
     * 
    **/
    delete<T extends Donation_settingsDeleteArgs>(
      args: SelectSubset<T, Donation_settingsDeleteArgs>
    ): CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings>, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T>>>

    /**
     * Update one Donation_settings.
     * @param {Donation_settingsUpdateArgs} args - Arguments to update one Donation_settings.
     * @example
     * // Update one Donation_settings
     * const donation_settings = await prisma.donation_settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Donation_settingsUpdateArgs>(
      args: SelectSubset<T, Donation_settingsUpdateArgs>
    ): CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings>, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T>>>

    /**
     * Delete zero or more Donation_settings.
     * @param {Donation_settingsDeleteManyArgs} args - Arguments to filter Donation_settings to delete.
     * @example
     * // Delete a few Donation_settings
     * const { count } = await prisma.donation_settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Donation_settingsDeleteManyArgs>(
      args?: SelectSubset<T, Donation_settingsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donation_settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Donation_settingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donation_settings
     * const donation_settings = await prisma.donation_settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Donation_settingsUpdateManyArgs>(
      args: SelectSubset<T, Donation_settingsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Donation_settings.
     * @param {Donation_settingsUpsertArgs} args - Arguments to update or create a Donation_settings.
     * @example
     * // Update or create a Donation_settings
     * const donation_settings = await prisma.donation_settings.upsert({
     *   create: {
     *     // ... data to create a Donation_settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donation_settings we want to update
     *   }
     * })
    **/
    upsert<T extends Donation_settingsUpsertArgs>(
      args: SelectSubset<T, Donation_settingsUpsertArgs>
    ): CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings>, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T>>>

    /**
     * Count the number of Donation_settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Donation_settingsCountArgs} args - Arguments to filter Donation_settings to count.
     * @example
     * // Count the number of Donation_settings
     * const count = await prisma.donation_settings.count({
     *   where: {
     *     // ... the filter for the Donation_settings we want to count
     *   }
     * })
    **/
    count<T extends Donation_settingsCountArgs>(
      args?: Subset<T, Donation_settingsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Donation_settingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donation_settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Donation_settingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Donation_settingsAggregateArgs>(args: Subset<T, Donation_settingsAggregateArgs>): PrismaPromise<GetDonation_settingsAggregateType<T>>

    /**
     * Group by Donation_settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Donation_settingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Donation_settingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Donation_settingsGroupByArgs['orderBy'] }
        : { orderBy?: Donation_settingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Donation_settingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonation_settingsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Donation_settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Donation_settingsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_donation_settingsTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Donation_settings findUnique
   */
  export type Donation_settingsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * Throw an Error if a Donation_settings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Donation_settings to fetch.
     * 
    **/
    where: Donation_settingsWhereUniqueInput
  }


  /**
   * Donation_settings findFirst
   */
  export type Donation_settingsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * Throw an Error if a Donation_settings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Donation_settings to fetch.
     * 
    **/
    where?: Donation_settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donation_settings to fetch.
     * 
    **/
    orderBy?: Enumerable<Donation_settingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Donation_settings.
     * 
    **/
    cursor?: Donation_settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donation_settings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donation_settings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Donation_settings.
     * 
    **/
    distinct?: Enumerable<Donation_settingsScalarFieldEnum>
  }


  /**
   * Donation_settings findMany
   */
  export type Donation_settingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * Filter, which Donation_settings to fetch.
     * 
    **/
    where?: Donation_settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Donation_settings to fetch.
     * 
    **/
    orderBy?: Enumerable<Donation_settingsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Donation_settings.
     * 
    **/
    cursor?: Donation_settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Donation_settings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Donation_settings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Donation_settingsScalarFieldEnum>
  }


  /**
   * Donation_settings create
   */
  export type Donation_settingsCreateArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * The data needed to create a Donation_settings.
     * 
    **/
    data: XOR<Donation_settingsCreateInput, Donation_settingsUncheckedCreateInput>
  }


  /**
   * Donation_settings createMany
   */
  export type Donation_settingsCreateManyArgs = {
    /**
     * The data used to create many Donation_settings.
     * 
    **/
    data: Enumerable<Donation_settingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Donation_settings update
   */
  export type Donation_settingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * The data needed to update a Donation_settings.
     * 
    **/
    data: XOR<Donation_settingsUpdateInput, Donation_settingsUncheckedUpdateInput>
    /**
     * Choose, which Donation_settings to update.
     * 
    **/
    where: Donation_settingsWhereUniqueInput
  }


  /**
   * Donation_settings updateMany
   */
  export type Donation_settingsUpdateManyArgs = {
    /**
     * The data used to update Donation_settings.
     * 
    **/
    data: XOR<Donation_settingsUpdateManyMutationInput, Donation_settingsUncheckedUpdateManyInput>
    /**
     * Filter which Donation_settings to update
     * 
    **/
    where?: Donation_settingsWhereInput
  }


  /**
   * Donation_settings upsert
   */
  export type Donation_settingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * The filter to search for the Donation_settings to update in case it exists.
     * 
    **/
    where: Donation_settingsWhereUniqueInput
    /**
     * In case the Donation_settings found by the `where` argument doesn't exist, create a new Donation_settings with this data.
     * 
    **/
    create: XOR<Donation_settingsCreateInput, Donation_settingsUncheckedCreateInput>
    /**
     * In case the Donation_settings was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Donation_settingsUpdateInput, Donation_settingsUncheckedUpdateInput>
  }


  /**
   * Donation_settings delete
   */
  export type Donation_settingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
    /**
     * Filter which Donation_settings to delete.
     * 
    **/
    where: Donation_settingsWhereUniqueInput
  }


  /**
   * Donation_settings deleteMany
   */
  export type Donation_settingsDeleteManyArgs = {
    /**
     * Filter which Donation_settings to delete
     * 
    **/
    where?: Donation_settingsWhereInput
  }


  /**
   * Donation_settings without action
   */
  export type Donation_settingsArgs = {
    /**
     * Select specific fields to fetch from the Donation_settings
     * 
    **/
    select?: Donation_settingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Donation_settingsInclude | null
  }



  /**
   * Model Invoice
   */


  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    streamer: string | null
    startDate: Date | null
    endDate: Date | null
    planType: Plan_types | null
    paidStatus: Paid_statuses | null
    subaddress: string | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    streamer: string | null
    startDate: Date | null
    endDate: Date | null
    planType: Plan_types | null
    paidStatus: Paid_statuses | null
    subaddress: string | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    streamer: number
    startDate: number
    endDate: number
    planType: number
    paidStatus: number
    subaddress: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    streamer?: true
    startDate?: true
    endDate?: true
    planType?: true
    paidStatus?: true
    subaddress?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    streamer?: true
    startDate?: true
    endDate?: true
    planType?: true
    paidStatus?: true
    subaddress?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    streamer?: true
    startDate?: true
    endDate?: true
    planType?: true
    paidStatus?: true
    subaddress?: true
    _all?: true
  }

  export type InvoiceAggregateArgs = {
    /**
     * Filter which Invoice to aggregate.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs = {
    where?: InvoiceWhereInput
    orderBy?: Enumerable<InvoiceOrderByWithAggregationInput>
    by: Array<InvoiceScalarFieldEnum>
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }


  export type InvoiceGroupByOutputType = {
    id: number
    streamer: string | null
    startDate: Date | null
    endDate: Date | null
    planType: Plan_types | null
    paidStatus: Paid_statuses | null
    subaddress: string | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect = {
    id?: boolean
    streamer?: boolean
    startDate?: boolean
    endDate?: boolean
    planType?: boolean
    paidStatus?: boolean
    subaddress?: boolean
    streamer_invoiceTostreamer?: boolean | StreamerArgs
  }

  export type InvoiceInclude = {
    streamer_invoiceTostreamer?: boolean | StreamerArgs
  }

  export type InvoiceGetPayload<
    S extends boolean | null | undefined | InvoiceArgs,
    U = keyof S
      > = S extends true
        ? Invoice
    : S extends undefined
    ? never
    : S extends InvoiceArgs | InvoiceFindManyArgs
    ?'include' extends U
    ? Invoice  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_invoiceTostreamer' ? StreamerGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_invoiceTostreamer' ? StreamerGetPayload<S['select'][P]> | null :  P extends keyof Invoice ? Invoice[P] : never
  } 
    : Invoice
  : Invoice


  type InvoiceCountArgs = Merge<
    Omit<InvoiceFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceCountAggregateInputType | true
    }
  >

  export interface InvoiceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invoice'> extends True ? CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invoice'> extends True ? CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs>(
      args?: SelectSubset<T, InvoiceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs>(
      args: SelectSubset<T, InvoiceCreateArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Create many Invoices.
     *     @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     *     @example
     *     // Create many Invoices
     *     const invoice = await prisma.invoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceCreateManyArgs>(
      args?: SelectSubset<T, InvoiceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs>(
      args: SelectSubset<T, InvoiceDeleteArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs>(
      args: SelectSubset<T, InvoiceUpdateArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs>(
      args: SelectSubset<T, InvoiceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs>(
      args: SelectSubset<T, InvoiceUpsertArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_invoiceTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Throw an Error if a Invoice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Throw an Error if a Invoice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     * 
    **/
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoices to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice create
   */
  export type InvoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to create a Invoice.
     * 
    **/
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }


  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs = {
    /**
     * The data used to create many Invoices.
     * 
    **/
    data: Enumerable<InvoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to update a Invoice.
     * 
    **/
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs = {
    /**
     * The data used to update Invoices.
     * 
    **/
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     * 
    **/
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     * 
    **/
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }


  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter which Invoice to delete.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs = {
    /**
     * Filter which Invoices to delete
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice without action
   */
  export type InvoiceArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
  }



  /**
   * Model Stream
   */


  export type AggregateStream = {
    _count: StreamCountAggregateOutputType | null
    _avg: StreamAvgAggregateOutputType | null
    _sum: StreamSumAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  export type StreamAvgAggregateOutputType = {
    category: number | null
  }

  export type StreamSumAggregateOutputType = {
    category: number | null
  }

  export type StreamMinAggregateOutputType = {
    streamer: string | null
    url: string | null
    platform: Platforms | null
    language: Languages | null
    category: number | null
  }

  export type StreamMaxAggregateOutputType = {
    streamer: string | null
    url: string | null
    platform: Platforms | null
    language: Languages | null
    category: number | null
  }

  export type StreamCountAggregateOutputType = {
    streamer: number
    url: number
    platform: number
    language: number
    category: number
    _all: number
  }


  export type StreamAvgAggregateInputType = {
    category?: true
  }

  export type StreamSumAggregateInputType = {
    category?: true
  }

  export type StreamMinAggregateInputType = {
    streamer?: true
    url?: true
    platform?: true
    language?: true
    category?: true
  }

  export type StreamMaxAggregateInputType = {
    streamer?: true
    url?: true
    platform?: true
    language?: true
    category?: true
  }

  export type StreamCountAggregateInputType = {
    streamer?: true
    url?: true
    platform?: true
    language?: true
    category?: true
    _all?: true
  }

  export type StreamAggregateArgs = {
    /**
     * Filter which Stream to aggregate.
     * 
    **/
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     * 
    **/
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Streams
    **/
    _count?: true | StreamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StreamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StreamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamMaxAggregateInputType
  }

  export type GetStreamAggregateType<T extends StreamAggregateArgs> = {
        [P in keyof T & keyof AggregateStream]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStream[P]>
      : GetScalarType<T[P], AggregateStream[P]>
  }




  export type StreamGroupByArgs = {
    where?: StreamWhereInput
    orderBy?: Enumerable<StreamOrderByWithAggregationInput>
    by: Array<StreamScalarFieldEnum>
    having?: StreamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamCountAggregateInputType | true
    _avg?: StreamAvgAggregateInputType
    _sum?: StreamSumAggregateInputType
    _min?: StreamMinAggregateInputType
    _max?: StreamMaxAggregateInputType
  }


  export type StreamGroupByOutputType = {
    streamer: string
    url: string | null
    platform: Platforms | null
    language: Languages | null
    category: number | null
    _count: StreamCountAggregateOutputType | null
    _avg: StreamAvgAggregateOutputType | null
    _sum: StreamSumAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  type GetStreamGroupByPayload<T extends StreamGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StreamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamGroupByOutputType[P]>
            : GetScalarType<T[P], StreamGroupByOutputType[P]>
        }
      >
    >


  export type StreamSelect = {
    streamer?: boolean
    url?: boolean
    platform?: boolean
    language?: boolean
    category?: boolean
    category_categoryTostream?: boolean | CategoryArgs
    streamer_streamTostreamer?: boolean | StreamerArgs
  }

  export type StreamInclude = {
    category_categoryTostream?: boolean | CategoryArgs
    streamer_streamTostreamer?: boolean | StreamerArgs
  }

  export type StreamGetPayload<
    S extends boolean | null | undefined | StreamArgs,
    U = keyof S
      > = S extends true
        ? Stream
    : S extends undefined
    ? never
    : S extends StreamArgs | StreamFindManyArgs
    ?'include' extends U
    ? Stream  & {
    [P in TrueKeys<S['include']>]:
        P extends 'category_categoryTostream' ? CategoryGetPayload<S['include'][P]> | null :
        P extends 'streamer_streamTostreamer' ? StreamerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'category_categoryTostream' ? CategoryGetPayload<S['select'][P]> | null :
        P extends 'streamer_streamTostreamer' ? StreamerGetPayload<S['select'][P]> :  P extends keyof Stream ? Stream[P] : never
  } 
    : Stream
  : Stream


  type StreamCountArgs = Merge<
    Omit<StreamFindManyArgs, 'select' | 'include'> & {
      select?: StreamCountAggregateInputType | true
    }
  >

  export interface StreamDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Stream that matches the filter.
     * @param {StreamFindUniqueArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StreamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StreamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stream'> extends True ? CheckSelect<T, Prisma__StreamClient<Stream>, Prisma__StreamClient<StreamGetPayload<T>>> : CheckSelect<T, Prisma__StreamClient<Stream | null >, Prisma__StreamClient<StreamGetPayload<T> | null >>

    /**
     * Find the first Stream that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StreamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StreamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stream'> extends True ? CheckSelect<T, Prisma__StreamClient<Stream>, Prisma__StreamClient<StreamGetPayload<T>>> : CheckSelect<T, Prisma__StreamClient<Stream | null >, Prisma__StreamClient<StreamGetPayload<T> | null >>

    /**
     * Find zero or more Streams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Streams
     * const streams = await prisma.stream.findMany()
     * 
     * // Get first 10 Streams
     * const streams = await prisma.stream.findMany({ take: 10 })
     * 
     * // Only select the `streamer`
     * const streamWithStreamerOnly = await prisma.stream.findMany({ select: { streamer: true } })
     * 
    **/
    findMany<T extends StreamFindManyArgs>(
      args?: SelectSubset<T, StreamFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stream>>, PrismaPromise<Array<StreamGetPayload<T>>>>

    /**
     * Create a Stream.
     * @param {StreamCreateArgs} args - Arguments to create a Stream.
     * @example
     * // Create one Stream
     * const Stream = await prisma.stream.create({
     *   data: {
     *     // ... data to create a Stream
     *   }
     * })
     * 
    **/
    create<T extends StreamCreateArgs>(
      args: SelectSubset<T, StreamCreateArgs>
    ): CheckSelect<T, Prisma__StreamClient<Stream>, Prisma__StreamClient<StreamGetPayload<T>>>

    /**
     * Create many Streams.
     *     @param {StreamCreateManyArgs} args - Arguments to create many Streams.
     *     @example
     *     // Create many Streams
     *     const stream = await prisma.stream.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StreamCreateManyArgs>(
      args?: SelectSubset<T, StreamCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stream.
     * @param {StreamDeleteArgs} args - Arguments to delete one Stream.
     * @example
     * // Delete one Stream
     * const Stream = await prisma.stream.delete({
     *   where: {
     *     // ... filter to delete one Stream
     *   }
     * })
     * 
    **/
    delete<T extends StreamDeleteArgs>(
      args: SelectSubset<T, StreamDeleteArgs>
    ): CheckSelect<T, Prisma__StreamClient<Stream>, Prisma__StreamClient<StreamGetPayload<T>>>

    /**
     * Update one Stream.
     * @param {StreamUpdateArgs} args - Arguments to update one Stream.
     * @example
     * // Update one Stream
     * const stream = await prisma.stream.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StreamUpdateArgs>(
      args: SelectSubset<T, StreamUpdateArgs>
    ): CheckSelect<T, Prisma__StreamClient<Stream>, Prisma__StreamClient<StreamGetPayload<T>>>

    /**
     * Delete zero or more Streams.
     * @param {StreamDeleteManyArgs} args - Arguments to filter Streams to delete.
     * @example
     * // Delete a few Streams
     * const { count } = await prisma.stream.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StreamDeleteManyArgs>(
      args?: SelectSubset<T, StreamDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Streams
     * const stream = await prisma.stream.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StreamUpdateManyArgs>(
      args: SelectSubset<T, StreamUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stream.
     * @param {StreamUpsertArgs} args - Arguments to update or create a Stream.
     * @example
     * // Update or create a Stream
     * const stream = await prisma.stream.upsert({
     *   create: {
     *     // ... data to create a Stream
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stream we want to update
     *   }
     * })
    **/
    upsert<T extends StreamUpsertArgs>(
      args: SelectSubset<T, StreamUpsertArgs>
    ): CheckSelect<T, Prisma__StreamClient<Stream>, Prisma__StreamClient<StreamGetPayload<T>>>

    /**
     * Count the number of Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamCountArgs} args - Arguments to filter Streams to count.
     * @example
     * // Count the number of Streams
     * const count = await prisma.stream.count({
     *   where: {
     *     // ... the filter for the Streams we want to count
     *   }
     * })
    **/
    count<T extends StreamCountArgs>(
      args?: Subset<T, StreamCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamAggregateArgs>(args: Subset<T, StreamAggregateArgs>): PrismaPromise<GetStreamAggregateType<T>>

    /**
     * Group by Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamGroupByArgs['orderBy'] }
        : { orderBy?: StreamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stream.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StreamClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category_categoryTostream<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    streamer_streamTostreamer<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Stream findUnique
   */
  export type StreamFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * Throw an Error if a Stream can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stream to fetch.
     * 
    **/
    where: StreamWhereUniqueInput
  }


  /**
   * Stream findFirst
   */
  export type StreamFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * Throw an Error if a Stream can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stream to fetch.
     * 
    **/
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     * 
    **/
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     * 
    **/
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     * 
    **/
    distinct?: Enumerable<StreamScalarFieldEnum>
  }


  /**
   * Stream findMany
   */
  export type StreamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * Filter, which Streams to fetch.
     * 
    **/
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     * 
    **/
    orderBy?: Enumerable<StreamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Streams.
     * 
    **/
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StreamScalarFieldEnum>
  }


  /**
   * Stream create
   */
  export type StreamCreateArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * The data needed to create a Stream.
     * 
    **/
    data: XOR<StreamCreateInput, StreamUncheckedCreateInput>
  }


  /**
   * Stream createMany
   */
  export type StreamCreateManyArgs = {
    /**
     * The data used to create many Streams.
     * 
    **/
    data: Enumerable<StreamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stream update
   */
  export type StreamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * The data needed to update a Stream.
     * 
    **/
    data: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
    /**
     * Choose, which Stream to update.
     * 
    **/
    where: StreamWhereUniqueInput
  }


  /**
   * Stream updateMany
   */
  export type StreamUpdateManyArgs = {
    /**
     * The data used to update Streams.
     * 
    **/
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyInput>
    /**
     * Filter which Streams to update
     * 
    **/
    where?: StreamWhereInput
  }


  /**
   * Stream upsert
   */
  export type StreamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * The filter to search for the Stream to update in case it exists.
     * 
    **/
    where: StreamWhereUniqueInput
    /**
     * In case the Stream found by the `where` argument doesn't exist, create a new Stream with this data.
     * 
    **/
    create: XOR<StreamCreateInput, StreamUncheckedCreateInput>
    /**
     * In case the Stream was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
  }


  /**
   * Stream delete
   */
  export type StreamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
    /**
     * Filter which Stream to delete.
     * 
    **/
    where: StreamWhereUniqueInput
  }


  /**
   * Stream deleteMany
   */
  export type StreamDeleteManyArgs = {
    /**
     * Filter which Streams to delete
     * 
    **/
    where?: StreamWhereInput
  }


  /**
   * Stream without action
   */
  export type StreamArgs = {
    /**
     * Select specific fields to fetch from the Stream
     * 
    **/
    select?: StreamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamInclude | null
  }



  /**
   * Model Streamer
   */


  export type AggregateStreamer = {
    _count: StreamerCountAggregateOutputType | null
    _min: StreamerMinAggregateOutputType | null
    _max: StreamerMaxAggregateOutputType | null
  }

  export type StreamerMinAggregateOutputType = {
    id: string | null
    name: string | null
    alias: string | null
    socket: string | null
    updatedAt: Date | null
    isOnline: boolean | null
    status: Statuses | null
  }

  export type StreamerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    alias: string | null
    socket: string | null
    updatedAt: Date | null
    isOnline: boolean | null
    status: Statuses | null
  }

  export type StreamerCountAggregateOutputType = {
    id: number
    name: number
    alias: number
    socket: number
    updatedAt: number
    isOnline: number
    status: number
    _all: number
  }


  export type StreamerMinAggregateInputType = {
    id?: true
    name?: true
    alias?: true
    socket?: true
    updatedAt?: true
    isOnline?: true
    status?: true
  }

  export type StreamerMaxAggregateInputType = {
    id?: true
    name?: true
    alias?: true
    socket?: true
    updatedAt?: true
    isOnline?: true
    status?: true
  }

  export type StreamerCountAggregateInputType = {
    id?: true
    name?: true
    alias?: true
    socket?: true
    updatedAt?: true
    isOnline?: true
    status?: true
    _all?: true
  }

  export type StreamerAggregateArgs = {
    /**
     * Filter which Streamer to aggregate.
     * 
    **/
    where?: StreamerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streamers to fetch.
     * 
    **/
    orderBy?: Enumerable<StreamerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StreamerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streamers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streamers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Streamers
    **/
    _count?: true | StreamerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamerMaxAggregateInputType
  }

  export type GetStreamerAggregateType<T extends StreamerAggregateArgs> = {
        [P in keyof T & keyof AggregateStreamer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStreamer[P]>
      : GetScalarType<T[P], AggregateStreamer[P]>
  }




  export type StreamerGroupByArgs = {
    where?: StreamerWhereInput
    orderBy?: Enumerable<StreamerOrderByWithAggregationInput>
    by: Array<StreamerScalarFieldEnum>
    having?: StreamerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamerCountAggregateInputType | true
    _min?: StreamerMinAggregateInputType
    _max?: StreamerMaxAggregateInputType
  }


  export type StreamerGroupByOutputType = {
    id: string
    name: string
    alias: string
    socket: string | null
    updatedAt: Date
    isOnline: boolean
    status: Statuses | null
    _count: StreamerCountAggregateOutputType | null
    _min: StreamerMinAggregateOutputType | null
    _max: StreamerMaxAggregateOutputType | null
  }

  type GetStreamerGroupByPayload<T extends StreamerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StreamerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamerGroupByOutputType[P]>
            : GetScalarType<T[P], StreamerGroupByOutputType[P]>
        }
      >
    >


  export type StreamerSelect = {
    id?: boolean
    name?: boolean
    alias?: boolean
    socket?: boolean
    updatedAt?: boolean
    isOnline?: boolean
    status?: boolean
    animation?: boolean | AnimationFindManyArgs
    category?: boolean | CategoryFindManyArgs
    donation?: boolean | DonationFindManyArgs
    donationSettings?: boolean | Donation_settingsArgs
    invoice?: boolean | InvoiceFindManyArgs
    stream?: boolean | StreamArgs
    wallet?: boolean | WalletArgs
    Account?: boolean | AccountFindManyArgs
    _count?: boolean | StreamerCountOutputTypeArgs
  }

  export type StreamerInclude = {
    animation?: boolean | AnimationFindManyArgs
    category?: boolean | CategoryFindManyArgs
    donation?: boolean | DonationFindManyArgs
    donationSettings?: boolean | Donation_settingsArgs
    invoice?: boolean | InvoiceFindManyArgs
    stream?: boolean | StreamArgs
    wallet?: boolean | WalletArgs
    Account?: boolean | AccountFindManyArgs
    _count?: boolean | StreamerCountOutputTypeArgs
  }

  export type StreamerGetPayload<
    S extends boolean | null | undefined | StreamerArgs,
    U = keyof S
      > = S extends true
        ? Streamer
    : S extends undefined
    ? never
    : S extends StreamerArgs | StreamerFindManyArgs
    ?'include' extends U
    ? Streamer  & {
    [P in TrueKeys<S['include']>]:
        P extends 'animation' ? Array < AnimationGetPayload<S['include'][P]>>  :
        P extends 'category' ? Array < CategoryGetPayload<S['include'][P]>>  :
        P extends 'donation' ? Array < DonationGetPayload<S['include'][P]>>  :
        P extends 'donationSettings' ? Donation_settingsGetPayload<S['include'][P]> | null :
        P extends 'invoice' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'stream' ? StreamGetPayload<S['include'][P]> | null :
        P extends 'wallet' ? WalletGetPayload<S['include'][P]> | null :
        P extends 'Account' ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends '_count' ? StreamerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'animation' ? Array < AnimationGetPayload<S['select'][P]>>  :
        P extends 'category' ? Array < CategoryGetPayload<S['select'][P]>>  :
        P extends 'donation' ? Array < DonationGetPayload<S['select'][P]>>  :
        P extends 'donationSettings' ? Donation_settingsGetPayload<S['select'][P]> | null :
        P extends 'invoice' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'stream' ? StreamGetPayload<S['select'][P]> | null :
        P extends 'wallet' ? WalletGetPayload<S['select'][P]> | null :
        P extends 'Account' ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends '_count' ? StreamerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Streamer ? Streamer[P] : never
  } 
    : Streamer
  : Streamer


  type StreamerCountArgs = Merge<
    Omit<StreamerFindManyArgs, 'select' | 'include'> & {
      select?: StreamerCountAggregateInputType | true
    }
  >

  export interface StreamerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Streamer that matches the filter.
     * @param {StreamerFindUniqueArgs} args - Arguments to find a Streamer
     * @example
     * // Get one Streamer
     * const streamer = await prisma.streamer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StreamerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StreamerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Streamer'> extends True ? CheckSelect<T, Prisma__StreamerClient<Streamer>, Prisma__StreamerClient<StreamerGetPayload<T>>> : CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>

    /**
     * Find the first Streamer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerFindFirstArgs} args - Arguments to find a Streamer
     * @example
     * // Get one Streamer
     * const streamer = await prisma.streamer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StreamerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StreamerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Streamer'> extends True ? CheckSelect<T, Prisma__StreamerClient<Streamer>, Prisma__StreamerClient<StreamerGetPayload<T>>> : CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>

    /**
     * Find zero or more Streamers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Streamers
     * const streamers = await prisma.streamer.findMany()
     * 
     * // Get first 10 Streamers
     * const streamers = await prisma.streamer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const streamerWithIdOnly = await prisma.streamer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StreamerFindManyArgs>(
      args?: SelectSubset<T, StreamerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Streamer>>, PrismaPromise<Array<StreamerGetPayload<T>>>>

    /**
     * Create a Streamer.
     * @param {StreamerCreateArgs} args - Arguments to create a Streamer.
     * @example
     * // Create one Streamer
     * const Streamer = await prisma.streamer.create({
     *   data: {
     *     // ... data to create a Streamer
     *   }
     * })
     * 
    **/
    create<T extends StreamerCreateArgs>(
      args: SelectSubset<T, StreamerCreateArgs>
    ): CheckSelect<T, Prisma__StreamerClient<Streamer>, Prisma__StreamerClient<StreamerGetPayload<T>>>

    /**
     * Create many Streamers.
     *     @param {StreamerCreateManyArgs} args - Arguments to create many Streamers.
     *     @example
     *     // Create many Streamers
     *     const streamer = await prisma.streamer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StreamerCreateManyArgs>(
      args?: SelectSubset<T, StreamerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Streamer.
     * @param {StreamerDeleteArgs} args - Arguments to delete one Streamer.
     * @example
     * // Delete one Streamer
     * const Streamer = await prisma.streamer.delete({
     *   where: {
     *     // ... filter to delete one Streamer
     *   }
     * })
     * 
    **/
    delete<T extends StreamerDeleteArgs>(
      args: SelectSubset<T, StreamerDeleteArgs>
    ): CheckSelect<T, Prisma__StreamerClient<Streamer>, Prisma__StreamerClient<StreamerGetPayload<T>>>

    /**
     * Update one Streamer.
     * @param {StreamerUpdateArgs} args - Arguments to update one Streamer.
     * @example
     * // Update one Streamer
     * const streamer = await prisma.streamer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StreamerUpdateArgs>(
      args: SelectSubset<T, StreamerUpdateArgs>
    ): CheckSelect<T, Prisma__StreamerClient<Streamer>, Prisma__StreamerClient<StreamerGetPayload<T>>>

    /**
     * Delete zero or more Streamers.
     * @param {StreamerDeleteManyArgs} args - Arguments to filter Streamers to delete.
     * @example
     * // Delete a few Streamers
     * const { count } = await prisma.streamer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StreamerDeleteManyArgs>(
      args?: SelectSubset<T, StreamerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Streamers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Streamers
     * const streamer = await prisma.streamer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StreamerUpdateManyArgs>(
      args: SelectSubset<T, StreamerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Streamer.
     * @param {StreamerUpsertArgs} args - Arguments to update or create a Streamer.
     * @example
     * // Update or create a Streamer
     * const streamer = await prisma.streamer.upsert({
     *   create: {
     *     // ... data to create a Streamer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Streamer we want to update
     *   }
     * })
    **/
    upsert<T extends StreamerUpsertArgs>(
      args: SelectSubset<T, StreamerUpsertArgs>
    ): CheckSelect<T, Prisma__StreamerClient<Streamer>, Prisma__StreamerClient<StreamerGetPayload<T>>>

    /**
     * Count the number of Streamers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCountArgs} args - Arguments to filter Streamers to count.
     * @example
     * // Count the number of Streamers
     * const count = await prisma.streamer.count({
     *   where: {
     *     // ... the filter for the Streamers we want to count
     *   }
     * })
    **/
    count<T extends StreamerCountArgs>(
      args?: Subset<T, StreamerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Streamer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamerAggregateArgs>(args: Subset<T, StreamerAggregateArgs>): PrismaPromise<GetStreamerAggregateType<T>>

    /**
     * Group by Streamer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamerGroupByArgs['orderBy'] }
        : { orderBy?: StreamerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamerGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Streamer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StreamerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    animation<T extends AnimationFindManyArgs = {}>(args?: Subset<T, AnimationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Animation>>, PrismaPromise<Array<AnimationGetPayload<T>>>>;

    category<T extends CategoryFindManyArgs = {}>(args?: Subset<T, CategoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>;

    donation<T extends DonationFindManyArgs = {}>(args?: Subset<T, DonationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Donation>>, PrismaPromise<Array<DonationGetPayload<T>>>>;

    donationSettings<T extends Donation_settingsArgs = {}>(args?: Subset<T, Donation_settingsArgs>): CheckSelect<T, Prisma__Donation_settingsClient<Donation_settings | null >, Prisma__Donation_settingsClient<Donation_settingsGetPayload<T> | null >>;

    invoice<T extends InvoiceFindManyArgs = {}>(args?: Subset<T, InvoiceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>;

    stream<T extends StreamArgs = {}>(args?: Subset<T, StreamArgs>): CheckSelect<T, Prisma__StreamClient<Stream | null >, Prisma__StreamClient<StreamGetPayload<T> | null >>;

    wallet<T extends WalletArgs = {}>(args?: Subset<T, WalletArgs>): CheckSelect<T, Prisma__WalletClient<Wallet | null >, Prisma__WalletClient<WalletGetPayload<T> | null >>;

    Account<T extends AccountFindManyArgs = {}>(args?: Subset<T, AccountFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Streamer findUnique
   */
  export type StreamerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * Throw an Error if a Streamer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Streamer to fetch.
     * 
    **/
    where: StreamerWhereUniqueInput
  }


  /**
   * Streamer findFirst
   */
  export type StreamerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * Throw an Error if a Streamer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Streamer to fetch.
     * 
    **/
    where?: StreamerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streamers to fetch.
     * 
    **/
    orderBy?: Enumerable<StreamerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streamers.
     * 
    **/
    cursor?: StreamerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streamers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streamers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streamers.
     * 
    **/
    distinct?: Enumerable<StreamerScalarFieldEnum>
  }


  /**
   * Streamer findMany
   */
  export type StreamerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * Filter, which Streamers to fetch.
     * 
    **/
    where?: StreamerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streamers to fetch.
     * 
    **/
    orderBy?: Enumerable<StreamerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Streamers.
     * 
    **/
    cursor?: StreamerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streamers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streamers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StreamerScalarFieldEnum>
  }


  /**
   * Streamer create
   */
  export type StreamerCreateArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * The data needed to create a Streamer.
     * 
    **/
    data: XOR<StreamerCreateInput, StreamerUncheckedCreateInput>
  }


  /**
   * Streamer createMany
   */
  export type StreamerCreateManyArgs = {
    /**
     * The data used to create many Streamers.
     * 
    **/
    data: Enumerable<StreamerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Streamer update
   */
  export type StreamerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * The data needed to update a Streamer.
     * 
    **/
    data: XOR<StreamerUpdateInput, StreamerUncheckedUpdateInput>
    /**
     * Choose, which Streamer to update.
     * 
    **/
    where: StreamerWhereUniqueInput
  }


  /**
   * Streamer updateMany
   */
  export type StreamerUpdateManyArgs = {
    /**
     * The data used to update Streamers.
     * 
    **/
    data: XOR<StreamerUpdateManyMutationInput, StreamerUncheckedUpdateManyInput>
    /**
     * Filter which Streamers to update
     * 
    **/
    where?: StreamerWhereInput
  }


  /**
   * Streamer upsert
   */
  export type StreamerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * The filter to search for the Streamer to update in case it exists.
     * 
    **/
    where: StreamerWhereUniqueInput
    /**
     * In case the Streamer found by the `where` argument doesn't exist, create a new Streamer with this data.
     * 
    **/
    create: XOR<StreamerCreateInput, StreamerUncheckedCreateInput>
    /**
     * In case the Streamer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StreamerUpdateInput, StreamerUncheckedUpdateInput>
  }


  /**
   * Streamer delete
   */
  export type StreamerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
    /**
     * Filter which Streamer to delete.
     * 
    **/
    where: StreamerWhereUniqueInput
  }


  /**
   * Streamer deleteMany
   */
  export type StreamerDeleteManyArgs = {
    /**
     * Filter which Streamers to delete
     * 
    **/
    where?: StreamerWhereInput
  }


  /**
   * Streamer without action
   */
  export type StreamerArgs = {
    /**
     * Select specific fields to fetch from the Streamer
     * 
    **/
    select?: StreamerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StreamerInclude | null
  }



  /**
   * Model Wallet
   */


  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    restoreHeight: number | null
    lastSyncHeight: number | null
  }

  export type WalletSumAggregateOutputType = {
    restoreHeight: number | null
    lastSyncHeight: number | null
  }

  export type WalletMinAggregateOutputType = {
    streamer: string | null
    restoreHeight: number | null
    lastSyncHeight: number | null
  }

  export type WalletMaxAggregateOutputType = {
    streamer: string | null
    restoreHeight: number | null
    lastSyncHeight: number | null
  }

  export type WalletCountAggregateOutputType = {
    streamer: number
    restoreHeight: number
    lastSyncHeight: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    restoreHeight?: true
    lastSyncHeight?: true
  }

  export type WalletSumAggregateInputType = {
    restoreHeight?: true
    lastSyncHeight?: true
  }

  export type WalletMinAggregateInputType = {
    streamer?: true
    restoreHeight?: true
    lastSyncHeight?: true
  }

  export type WalletMaxAggregateInputType = {
    streamer?: true
    restoreHeight?: true
    lastSyncHeight?: true
  }

  export type WalletCountAggregateInputType = {
    streamer?: true
    restoreHeight?: true
    lastSyncHeight?: true
    _all?: true
  }

  export type WalletAggregateArgs = {
    /**
     * Filter which Wallet to aggregate.
     * 
    **/
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs = {
    where?: WalletWhereInput
    orderBy?: Enumerable<WalletOrderByWithAggregationInput>
    by: Array<WalletScalarFieldEnum>
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }


  export type WalletGroupByOutputType = {
    streamer: string
    restoreHeight: number | null
    lastSyncHeight: number | null
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect = {
    streamer?: boolean
    restoreHeight?: boolean
    lastSyncHeight?: boolean
    streamer_streamerTowallet?: boolean | StreamerArgs
  }

  export type WalletInclude = {
    streamer_streamerTowallet?: boolean | StreamerArgs
  }

  export type WalletGetPayload<
    S extends boolean | null | undefined | WalletArgs,
    U = keyof S
      > = S extends true
        ? Wallet
    : S extends undefined
    ? never
    : S extends WalletArgs | WalletFindManyArgs
    ?'include' extends U
    ? Wallet  & {
    [P in TrueKeys<S['include']>]:
        P extends 'streamer_streamerTowallet' ? StreamerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'streamer_streamerTowallet' ? StreamerGetPayload<S['select'][P]> :  P extends keyof Wallet ? Wallet[P] : never
  } 
    : Wallet
  : Wallet


  type WalletCountArgs = Merge<
    Omit<WalletFindManyArgs, 'select' | 'include'> & {
      select?: WalletCountAggregateInputType | true
    }
  >

  export interface WalletDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WalletFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WalletFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Wallet'> extends True ? CheckSelect<T, Prisma__WalletClient<Wallet>, Prisma__WalletClient<WalletGetPayload<T>>> : CheckSelect<T, Prisma__WalletClient<Wallet | null >, Prisma__WalletClient<WalletGetPayload<T> | null >>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WalletFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WalletFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Wallet'> extends True ? CheckSelect<T, Prisma__WalletClient<Wallet>, Prisma__WalletClient<WalletGetPayload<T>>> : CheckSelect<T, Prisma__WalletClient<Wallet | null >, Prisma__WalletClient<WalletGetPayload<T> | null >>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `streamer`
     * const walletWithStreamerOnly = await prisma.wallet.findMany({ select: { streamer: true } })
     * 
    **/
    findMany<T extends WalletFindManyArgs>(
      args?: SelectSubset<T, WalletFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Wallet>>, PrismaPromise<Array<WalletGetPayload<T>>>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
    **/
    create<T extends WalletCreateArgs>(
      args: SelectSubset<T, WalletCreateArgs>
    ): CheckSelect<T, Prisma__WalletClient<Wallet>, Prisma__WalletClient<WalletGetPayload<T>>>

    /**
     * Create many Wallets.
     *     @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     *     @example
     *     // Create many Wallets
     *     const wallet = await prisma.wallet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WalletCreateManyArgs>(
      args?: SelectSubset<T, WalletCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
    **/
    delete<T extends WalletDeleteArgs>(
      args: SelectSubset<T, WalletDeleteArgs>
    ): CheckSelect<T, Prisma__WalletClient<Wallet>, Prisma__WalletClient<WalletGetPayload<T>>>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WalletUpdateArgs>(
      args: SelectSubset<T, WalletUpdateArgs>
    ): CheckSelect<T, Prisma__WalletClient<Wallet>, Prisma__WalletClient<WalletGetPayload<T>>>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WalletDeleteManyArgs>(
      args?: SelectSubset<T, WalletDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WalletUpdateManyArgs>(
      args: SelectSubset<T, WalletUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
    **/
    upsert<T extends WalletUpsertArgs>(
      args: SelectSubset<T, WalletUpsertArgs>
    ): CheckSelect<T, Prisma__WalletClient<Wallet>, Prisma__WalletClient<WalletGetPayload<T>>>

    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WalletClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    streamer_streamerTowallet<T extends StreamerArgs = {}>(args?: Subset<T, StreamerArgs>): CheckSelect<T, Prisma__StreamerClient<Streamer | null >, Prisma__StreamerClient<StreamerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * Throw an Error if a Wallet can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Wallet to fetch.
     * 
    **/
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * Throw an Error if a Wallet can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Wallet to fetch.
     * 
    **/
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     * 
    **/
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     * 
    **/
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * Filter, which Wallets to fetch.
     * 
    **/
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     * 
    **/
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     * 
    **/
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * Wallet create
   */
  export type WalletCreateArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * The data needed to create a Wallet.
     * 
    **/
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }


  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs = {
    /**
     * The data used to create many Wallets.
     * 
    **/
    data: Enumerable<WalletCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Wallet update
   */
  export type WalletUpdateArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * The data needed to update a Wallet.
     * 
    **/
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     * 
    **/
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs = {
    /**
     * The data used to update Wallets.
     * 
    **/
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     * 
    **/
    where?: WalletWhereInput
  }


  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     * 
    **/
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     * 
    **/
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }


  /**
   * Wallet delete
   */
  export type WalletDeleteArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
    /**
     * Filter which Wallet to delete.
     * 
    **/
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs = {
    /**
     * Filter which Wallets to delete
     * 
    **/
    where?: WalletWhereInput
  }


  /**
   * Wallet without action
   */
  export type WalletArgs = {
    /**
     * Select specific fields to fetch from the Wallet
     * 
    **/
    select?: WalletSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WalletInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    streamer: 'streamer',
    createdAt: 'createdAt',
    status: 'status'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const AnimationScalarFieldEnum: {
    id: 'id',
    streamer: 'streamer',
    size: 'size',
    color: 'color'
  };

  export type AnimationScalarFieldEnum = (typeof AnimationScalarFieldEnum)[keyof typeof AnimationScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    streamer: 'streamer',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const DonationScalarFieldEnum: {
    id: 'id',
    streamer: 'streamer',
    amount: 'amount',
    message: 'message',
    displayTimeSeconds: 'displayTimeSeconds',
    subaddress: 'subaddress',
    confirmations: 'confirmations',
    giphyUrl: 'giphyUrl',
    donor: 'donor',
    timestamp: 'timestamp'
  };

  export type DonationScalarFieldEnum = (typeof DonationScalarFieldEnum)[keyof typeof DonationScalarFieldEnum]


  export const Donation_settingsScalarFieldEnum: {
    streamer: 'streamer',
    secondPrice: 'secondPrice',
    charPrice: 'charPrice',
    charLimit: 'charLimit',
    minAmount: 'minAmount',
    gifsMinAmount: 'gifsMinAmount',
    goal: 'goal',
    goalProgress: 'goalProgress',
    goalReached: 'goalReached'
  };

  export type Donation_settingsScalarFieldEnum = (typeof Donation_settingsScalarFieldEnum)[keyof typeof Donation_settingsScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    streamer: 'streamer',
    startDate: 'startDate',
    endDate: 'endDate',
    planType: 'planType',
    paidStatus: 'paidStatus',
    subaddress: 'subaddress'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const StreamScalarFieldEnum: {
    streamer: 'streamer',
    url: 'url',
    platform: 'platform',
    language: 'language',
    category: 'category'
  };

  export type StreamScalarFieldEnum = (typeof StreamScalarFieldEnum)[keyof typeof StreamScalarFieldEnum]


  export const StreamerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    alias: 'alias',
    socket: 'socket',
    updatedAt: 'updatedAt',
    isOnline: 'isOnline',
    status: 'status'
  };

  export type StreamerScalarFieldEnum = (typeof StreamerScalarFieldEnum)[keyof typeof StreamerScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    streamer: 'streamer',
    restoreHeight: 'restoreHeight',
    lastSyncHeight: 'lastSyncHeight'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    streamer?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    status?: EnumStatusesNullableFilter | Statuses | null
    streamer_accountTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    streamer?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    streamer_accountTostreamer?: StreamerOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    streamer?: string
  }

  export type AccountOrderByWithAggregationInput = {
    streamer?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    streamer?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    status?: EnumStatusesNullableWithAggregatesFilter | Statuses | null
  }

  export type AnimationWhereInput = {
    AND?: Enumerable<AnimationWhereInput>
    OR?: Enumerable<AnimationWhereInput>
    NOT?: Enumerable<AnimationWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    size?: IntNullableFilter | number | null
    color?: StringNullableFilter | string | null
    streamer_animationTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput> | null
  }

  export type AnimationOrderByWithRelationInput = {
    id?: SortOrder
    streamer?: SortOrder
    size?: SortOrder
    color?: SortOrder
    streamer_animationTostreamer?: StreamerOrderByWithRelationInput
  }

  export type AnimationWhereUniqueInput = {
    id?: number
  }

  export type AnimationOrderByWithAggregationInput = {
    id?: SortOrder
    streamer?: SortOrder
    size?: SortOrder
    color?: SortOrder
    _count?: AnimationCountOrderByAggregateInput
    _avg?: AnimationAvgOrderByAggregateInput
    _max?: AnimationMaxOrderByAggregateInput
    _min?: AnimationMinOrderByAggregateInput
    _sum?: AnimationSumOrderByAggregateInput
  }

  export type AnimationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnimationScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnimationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnimationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    streamer?: StringNullableWithAggregatesFilter | string | null
    size?: IntNullableWithAggregatesFilter | number | null
    color?: StringNullableWithAggregatesFilter | string | null
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    name?: EnumCategoriesNullableFilter | Categories | null
    streamer_categoryTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput> | null
    stream?: StreamListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    streamer?: SortOrder
    name?: SortOrder
    streamer_categoryTostreamer?: StreamerOrderByWithRelationInput
    stream?: StreamOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    streamer?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    streamer?: StringNullableWithAggregatesFilter | string | null
    name?: EnumCategoriesNullableWithAggregatesFilter | Categories | null
  }

  export type DonationWhereInput = {
    AND?: Enumerable<DonationWhereInput>
    OR?: Enumerable<DonationWhereInput>
    NOT?: Enumerable<DonationWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    amount?: FloatFilter | number
    message?: StringNullableFilter | string | null
    displayTimeSeconds?: IntNullableFilter | number | null
    subaddress?: StringNullableFilter | string | null
    confirmations?: IntNullableFilter | number | null
    giphyUrl?: StringNullableFilter | string | null
    donor?: StringNullableFilter | string | null
    timestamp?: DateTimeNullableFilter | Date | string | null
    streamer_donationTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput> | null
  }

  export type DonationOrderByWithRelationInput = {
    id?: SortOrder
    streamer?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    displayTimeSeconds?: SortOrder
    subaddress?: SortOrder
    confirmations?: SortOrder
    giphyUrl?: SortOrder
    donor?: SortOrder
    timestamp?: SortOrder
    streamer_donationTostreamer?: StreamerOrderByWithRelationInput
  }

  export type DonationWhereUniqueInput = {
    id?: number
  }

  export type DonationOrderByWithAggregationInput = {
    id?: SortOrder
    streamer?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    displayTimeSeconds?: SortOrder
    subaddress?: SortOrder
    confirmations?: SortOrder
    giphyUrl?: SortOrder
    donor?: SortOrder
    timestamp?: SortOrder
    _count?: DonationCountOrderByAggregateInput
    _avg?: DonationAvgOrderByAggregateInput
    _max?: DonationMaxOrderByAggregateInput
    _min?: DonationMinOrderByAggregateInput
    _sum?: DonationSumOrderByAggregateInput
  }

  export type DonationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DonationScalarWhereWithAggregatesInput>
    OR?: Enumerable<DonationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DonationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    streamer?: StringNullableWithAggregatesFilter | string | null
    amount?: FloatWithAggregatesFilter | number
    message?: StringNullableWithAggregatesFilter | string | null
    displayTimeSeconds?: IntNullableWithAggregatesFilter | number | null
    subaddress?: StringNullableWithAggregatesFilter | string | null
    confirmations?: IntNullableWithAggregatesFilter | number | null
    giphyUrl?: StringNullableWithAggregatesFilter | string | null
    donor?: StringNullableWithAggregatesFilter | string | null
    timestamp?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type Donation_settingsWhereInput = {
    AND?: Enumerable<Donation_settingsWhereInput>
    OR?: Enumerable<Donation_settingsWhereInput>
    NOT?: Enumerable<Donation_settingsWhereInput>
    streamer?: StringFilter | string
    secondPrice?: IntNullableFilter | number | null
    charPrice?: FloatNullableFilter | number | null
    charLimit?: IntNullableFilter | number | null
    minAmount?: IntNullableFilter | number | null
    gifsMinAmount?: FloatNullableFilter | number | null
    goal?: FloatNullableFilter | number | null
    goalProgress?: FloatNullableFilter | number | null
    goalReached?: BoolNullableFilter | boolean | null
    streamer_donation_settingsTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput>
  }

  export type Donation_settingsOrderByWithRelationInput = {
    streamer?: SortOrder
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
    goalReached?: SortOrder
    streamer_donation_settingsTostreamer?: StreamerOrderByWithRelationInput
  }

  export type Donation_settingsWhereUniqueInput = {
    streamer?: string
  }

  export type Donation_settingsOrderByWithAggregationInput = {
    streamer?: SortOrder
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
    goalReached?: SortOrder
    _count?: Donation_settingsCountOrderByAggregateInput
    _avg?: Donation_settingsAvgOrderByAggregateInput
    _max?: Donation_settingsMaxOrderByAggregateInput
    _min?: Donation_settingsMinOrderByAggregateInput
    _sum?: Donation_settingsSumOrderByAggregateInput
  }

  export type Donation_settingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Donation_settingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Donation_settingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Donation_settingsScalarWhereWithAggregatesInput>
    streamer?: StringWithAggregatesFilter | string
    secondPrice?: IntNullableWithAggregatesFilter | number | null
    charPrice?: FloatNullableWithAggregatesFilter | number | null
    charLimit?: IntNullableWithAggregatesFilter | number | null
    minAmount?: IntNullableWithAggregatesFilter | number | null
    gifsMinAmount?: FloatNullableWithAggregatesFilter | number | null
    goal?: FloatNullableWithAggregatesFilter | number | null
    goalProgress?: FloatNullableWithAggregatesFilter | number | null
    goalReached?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type InvoiceWhereInput = {
    AND?: Enumerable<InvoiceWhereInput>
    OR?: Enumerable<InvoiceWhereInput>
    NOT?: Enumerable<InvoiceWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    startDate?: DateTimeNullableFilter | Date | string | null
    endDate?: DateTimeNullableFilter | Date | string | null
    planType?: EnumPlan_typesNullableFilter | Plan_types | null
    paidStatus?: EnumPaid_statusesNullableFilter | Paid_statuses | null
    subaddress?: StringNullableFilter | string | null
    streamer_invoiceTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput> | null
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    streamer?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    planType?: SortOrder
    paidStatus?: SortOrder
    subaddress?: SortOrder
    streamer_invoiceTostreamer?: StreamerOrderByWithRelationInput
  }

  export type InvoiceWhereUniqueInput = {
    id?: number
  }

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    streamer?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    planType?: SortOrder
    paidStatus?: SortOrder
    subaddress?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    streamer?: StringNullableWithAggregatesFilter | string | null
    startDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    planType?: EnumPlan_typesNullableWithAggregatesFilter | Plan_types | null
    paidStatus?: EnumPaid_statusesNullableWithAggregatesFilter | Paid_statuses | null
    subaddress?: StringNullableWithAggregatesFilter | string | null
  }

  export type StreamWhereInput = {
    AND?: Enumerable<StreamWhereInput>
    OR?: Enumerable<StreamWhereInput>
    NOT?: Enumerable<StreamWhereInput>
    streamer?: StringFilter | string
    url?: StringNullableFilter | string | null
    platform?: EnumPlatformsNullableFilter | Platforms | null
    language?: EnumLanguagesNullableFilter | Languages | null
    category?: IntNullableFilter | number | null
    category_categoryTostream?: XOR<CategoryRelationFilter, CategoryWhereInput> | null
    streamer_streamTostreamer?: XOR<StreamerRelationFilter, StreamerWhereInput>
  }

  export type StreamOrderByWithRelationInput = {
    streamer?: SortOrder
    url?: SortOrder
    platform?: SortOrder
    language?: SortOrder
    category?: SortOrder
    category_categoryTostream?: CategoryOrderByWithRelationInput
    streamer_streamTostreamer?: StreamerOrderByWithRelationInput
  }

  export type StreamWhereUniqueInput = {
    streamer?: string
  }

  export type StreamOrderByWithAggregationInput = {
    streamer?: SortOrder
    url?: SortOrder
    platform?: SortOrder
    language?: SortOrder
    category?: SortOrder
    _count?: StreamCountOrderByAggregateInput
    _avg?: StreamAvgOrderByAggregateInput
    _max?: StreamMaxOrderByAggregateInput
    _min?: StreamMinOrderByAggregateInput
    _sum?: StreamSumOrderByAggregateInput
  }

  export type StreamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StreamScalarWhereWithAggregatesInput>
    OR?: Enumerable<StreamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StreamScalarWhereWithAggregatesInput>
    streamer?: StringWithAggregatesFilter | string
    url?: StringNullableWithAggregatesFilter | string | null
    platform?: EnumPlatformsNullableWithAggregatesFilter | Platforms | null
    language?: EnumLanguagesNullableWithAggregatesFilter | Languages | null
    category?: IntNullableWithAggregatesFilter | number | null
  }

  export type StreamerWhereInput = {
    AND?: Enumerable<StreamerWhereInput>
    OR?: Enumerable<StreamerWhereInput>
    NOT?: Enumerable<StreamerWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    alias?: StringFilter | string
    socket?: StringNullableFilter | string | null
    updatedAt?: DateTimeFilter | Date | string
    isOnline?: BoolFilter | boolean
    status?: EnumStatusesNullableFilter | Statuses | null
    animation?: AnimationListRelationFilter
    category?: CategoryListRelationFilter
    donation?: DonationListRelationFilter
    donationSettings?: XOR<Donation_settingsRelationFilter, Donation_settingsWhereInput> | null
    invoice?: InvoiceListRelationFilter
    stream?: XOR<StreamRelationFilter, StreamWhereInput> | null
    wallet?: XOR<WalletRelationFilter, WalletWhereInput> | null
    Account?: AccountListRelationFilter
  }

  export type StreamerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    socket?: SortOrder
    updatedAt?: SortOrder
    isOnline?: SortOrder
    status?: SortOrder
    animation?: AnimationOrderByRelationAggregateInput
    category?: CategoryOrderByRelationAggregateInput
    donation?: DonationOrderByRelationAggregateInput
    donationSettings?: Donation_settingsOrderByWithRelationInput
    invoice?: InvoiceOrderByRelationAggregateInput
    stream?: StreamOrderByWithRelationInput
    wallet?: WalletOrderByWithRelationInput
    Account?: AccountOrderByRelationAggregateInput
  }

  export type StreamerWhereUniqueInput = {
    id?: string
    name?: string
    alias?: string
    socket?: string
  }

  export type StreamerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    socket?: SortOrder
    updatedAt?: SortOrder
    isOnline?: SortOrder
    status?: SortOrder
    _count?: StreamerCountOrderByAggregateInput
    _max?: StreamerMaxOrderByAggregateInput
    _min?: StreamerMinOrderByAggregateInput
  }

  export type StreamerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StreamerScalarWhereWithAggregatesInput>
    OR?: Enumerable<StreamerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StreamerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    alias?: StringWithAggregatesFilter | string
    socket?: StringNullableWithAggregatesFilter | string | null
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isOnline?: BoolWithAggregatesFilter | boolean
    status?: EnumStatusesNullableWithAggregatesFilter | Statuses | null
  }

  export type WalletWhereInput = {
    AND?: Enumerable<WalletWhereInput>
    OR?: Enumerable<WalletWhereInput>
    NOT?: Enumerable<WalletWhereInput>
    streamer?: StringFilter | string
    restoreHeight?: IntNullableFilter | number | null
    lastSyncHeight?: IntNullableFilter | number | null
    streamer_streamerTowallet?: XOR<StreamerRelationFilter, StreamerWhereInput>
  }

  export type WalletOrderByWithRelationInput = {
    streamer?: SortOrder
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
    streamer_streamerTowallet?: StreamerOrderByWithRelationInput
  }

  export type WalletWhereUniqueInput = {
    streamer?: string
  }

  export type WalletOrderByWithAggregationInput = {
    streamer?: SortOrder
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WalletScalarWhereWithAggregatesInput>
    OR?: Enumerable<WalletScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WalletScalarWhereWithAggregatesInput>
    streamer?: StringWithAggregatesFilter | string
    restoreHeight?: IntNullableWithAggregatesFilter | number | null
    lastSyncHeight?: IntNullableWithAggregatesFilter | number | null
  }

  export type AccountCreateInput = {
    createdAt?: Date | string
    status?: Statuses | null
    streamer_accountTostreamer: StreamerCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    streamer: string
    createdAt?: Date | string
    status?: Statuses | null
  }

  export type AccountUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    streamer_accountTostreamer?: StreamerUpdateOneRequiredWithoutAccountInput
  }

  export type AccountUncheckedUpdateInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type AccountCreateManyInput = {
    streamer: string
    createdAt?: Date | string
    status?: Statuses | null
  }

  export type AccountUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type AccountUncheckedUpdateManyInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type AnimationCreateInput = {
    size?: number | null
    color?: string | null
    streamer_animationTostreamer?: StreamerCreateNestedOneWithoutAnimationInput
  }

  export type AnimationUncheckedCreateInput = {
    id?: number
    streamer?: string | null
    size?: number | null
    color?: string | null
  }

  export type AnimationUpdateInput = {
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    streamer_animationTostreamer?: StreamerUpdateOneWithoutAnimationInput
  }

  export type AnimationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimationCreateManyInput = {
    id?: number
    streamer?: string | null
    size?: number | null
    color?: string | null
  }

  export type AnimationUpdateManyMutationInput = {
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    name?: Categories | null
    streamer_categoryTostreamer?: StreamerCreateNestedOneWithoutCategoryInput
    stream?: StreamCreateNestedManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    streamer?: string | null
    name?: Categories | null
    stream?: StreamUncheckedCreateNestedManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryUpdateInput = {
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
    streamer_categoryTostreamer?: StreamerUpdateOneWithoutCategoryInput
    stream?: StreamUpdateManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
    stream?: StreamUncheckedUpdateManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    streamer?: string | null
    name?: Categories | null
  }

  export type CategoryUpdateManyMutationInput = {
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
  }

  export type DonationCreateInput = {
    amount: number
    message?: string | null
    displayTimeSeconds?: number | null
    subaddress?: string | null
    confirmations?: number | null
    giphyUrl?: string | null
    donor?: string | null
    timestamp?: Date | string | null
    streamer_donationTostreamer?: StreamerCreateNestedOneWithoutDonationInput
  }

  export type DonationUncheckedCreateInput = {
    id?: number
    streamer?: string | null
    amount: number
    message?: string | null
    displayTimeSeconds?: number | null
    subaddress?: string | null
    confirmations?: number | null
    giphyUrl?: string | null
    donor?: string | null
    timestamp?: Date | string | null
  }

  export type DonationUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    streamer_donationTostreamer?: StreamerUpdateOneWithoutDonationInput
  }

  export type DonationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DonationCreateManyInput = {
    id?: number
    streamer?: string | null
    amount: number
    message?: string | null
    displayTimeSeconds?: number | null
    subaddress?: string | null
    confirmations?: number | null
    giphyUrl?: string | null
    donor?: string | null
    timestamp?: Date | string | null
  }

  export type DonationUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DonationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Donation_settingsCreateInput = {
    secondPrice?: number | null
    charPrice?: number | null
    charLimit?: number | null
    minAmount?: number | null
    gifsMinAmount?: number | null
    goal?: number | null
    goalProgress?: number | null
    goalReached?: boolean | null
    streamer_donation_settingsTostreamer: StreamerCreateNestedOneWithoutDonationSettingsInput
  }

  export type Donation_settingsUncheckedCreateInput = {
    streamer: string
    secondPrice?: number | null
    charPrice?: number | null
    charLimit?: number | null
    minAmount?: number | null
    gifsMinAmount?: number | null
    goal?: number | null
    goalProgress?: number | null
    goalReached?: boolean | null
  }

  export type Donation_settingsUpdateInput = {
    secondPrice?: NullableIntFieldUpdateOperationsInput | number | null
    charPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    charLimit?: NullableIntFieldUpdateOperationsInput | number | null
    minAmount?: NullableIntFieldUpdateOperationsInput | number | null
    gifsMinAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    goal?: NullableFloatFieldUpdateOperationsInput | number | null
    goalProgress?: NullableFloatFieldUpdateOperationsInput | number | null
    goalReached?: NullableBoolFieldUpdateOperationsInput | boolean | null
    streamer_donation_settingsTostreamer?: StreamerUpdateOneRequiredWithoutDonationSettingsInput
  }

  export type Donation_settingsUncheckedUpdateInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    secondPrice?: NullableIntFieldUpdateOperationsInput | number | null
    charPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    charLimit?: NullableIntFieldUpdateOperationsInput | number | null
    minAmount?: NullableIntFieldUpdateOperationsInput | number | null
    gifsMinAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    goal?: NullableFloatFieldUpdateOperationsInput | number | null
    goalProgress?: NullableFloatFieldUpdateOperationsInput | number | null
    goalReached?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type Donation_settingsCreateManyInput = {
    streamer: string
    secondPrice?: number | null
    charPrice?: number | null
    charLimit?: number | null
    minAmount?: number | null
    gifsMinAmount?: number | null
    goal?: number | null
    goalProgress?: number | null
    goalReached?: boolean | null
  }

  export type Donation_settingsUpdateManyMutationInput = {
    secondPrice?: NullableIntFieldUpdateOperationsInput | number | null
    charPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    charLimit?: NullableIntFieldUpdateOperationsInput | number | null
    minAmount?: NullableIntFieldUpdateOperationsInput | number | null
    gifsMinAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    goal?: NullableFloatFieldUpdateOperationsInput | number | null
    goalProgress?: NullableFloatFieldUpdateOperationsInput | number | null
    goalReached?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type Donation_settingsUncheckedUpdateManyInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    secondPrice?: NullableIntFieldUpdateOperationsInput | number | null
    charPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    charLimit?: NullableIntFieldUpdateOperationsInput | number | null
    minAmount?: NullableIntFieldUpdateOperationsInput | number | null
    gifsMinAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    goal?: NullableFloatFieldUpdateOperationsInput | number | null
    goalProgress?: NullableFloatFieldUpdateOperationsInput | number | null
    goalReached?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type InvoiceCreateInput = {
    startDate?: Date | string | null
    endDate?: Date | string | null
    planType?: Plan_types | null
    paidStatus?: Paid_statuses | null
    subaddress?: string | null
    streamer_invoiceTostreamer?: StreamerCreateNestedOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    streamer?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    planType?: Plan_types | null
    paidStatus?: Paid_statuses | null
    subaddress?: string | null
  }

  export type InvoiceUpdateInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    streamer_invoiceTostreamer?: StreamerUpdateOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceCreateManyInput = {
    id?: number
    streamer?: string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    planType?: Plan_types | null
    paidStatus?: Paid_statuses | null
    subaddress?: string | null
  }

  export type InvoiceUpdateManyMutationInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StreamCreateInput = {
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
    category_categoryTostream?: CategoryCreateNestedOneWithoutStreamInput
    streamer_streamTostreamer: StreamerCreateNestedOneWithoutStreamInput
  }

  export type StreamUncheckedCreateInput = {
    streamer: string
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
    category?: number | null
  }

  export type StreamUpdateInput = {
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
    category_categoryTostream?: CategoryUpdateOneWithoutStreamInput
    streamer_streamTostreamer?: StreamerUpdateOneRequiredWithoutStreamInput
  }

  export type StreamUncheckedUpdateInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
    category?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StreamCreateManyInput = {
    streamer: string
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
    category?: number | null
  }

  export type StreamUpdateManyMutationInput = {
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
  }

  export type StreamUncheckedUpdateManyInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
    category?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StreamerCreateInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateManyInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
  }

  export type StreamerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type StreamerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type WalletCreateInput = {
    restoreHeight?: number | null
    lastSyncHeight?: number | null
    streamer_streamerTowallet: StreamerCreateNestedOneWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    streamer: string
    restoreHeight?: number | null
    lastSyncHeight?: number | null
  }

  export type WalletUpdateInput = {
    restoreHeight?: NullableIntFieldUpdateOperationsInput | number | null
    lastSyncHeight?: NullableIntFieldUpdateOperationsInput | number | null
    streamer_streamerTowallet?: StreamerUpdateOneRequiredWithoutWalletInput
  }

  export type WalletUncheckedUpdateInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    restoreHeight?: NullableIntFieldUpdateOperationsInput | number | null
    lastSyncHeight?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WalletCreateManyInput = {
    streamer: string
    restoreHeight?: number | null
    lastSyncHeight?: number | null
  }

  export type WalletUpdateManyMutationInput = {
    restoreHeight?: NullableIntFieldUpdateOperationsInput | number | null
    lastSyncHeight?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WalletUncheckedUpdateManyInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    restoreHeight?: NullableIntFieldUpdateOperationsInput | number | null
    lastSyncHeight?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumStatusesNullableFilter = {
    equals?: Statuses | null
    in?: Enumerable<Statuses> | null
    notIn?: Enumerable<Statuses> | null
    not?: NestedEnumStatusesNullableFilter | Statuses | null
  }

  export type StreamerRelationFilter = {
    is?: StreamerWhereInput | null
    isNot?: StreamerWhereInput | null
  }

  export type AccountCountOrderByAggregateInput = {
    streamer?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    streamer?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    streamer?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumStatusesNullableWithAggregatesFilter = {
    equals?: Statuses | null
    in?: Enumerable<Statuses> | null
    notIn?: Enumerable<Statuses> | null
    not?: NestedEnumStatusesNullableWithAggregatesFilter | Statuses | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumStatusesNullableFilter
    _max?: NestedEnumStatusesNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AnimationCountOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    size?: SortOrder
    color?: SortOrder
  }

  export type AnimationAvgOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type AnimationMaxOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    size?: SortOrder
    color?: SortOrder
  }

  export type AnimationMinOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    size?: SortOrder
    color?: SortOrder
  }

  export type AnimationSumOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumCategoriesNullableFilter = {
    equals?: Categories | null
    in?: Enumerable<Categories> | null
    notIn?: Enumerable<Categories> | null
    not?: NestedEnumCategoriesNullableFilter | Categories | null
  }

  export type StreamListRelationFilter = {
    every?: StreamWhereInput
    some?: StreamWhereInput
    none?: StreamWhereInput
  }

  export type StreamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumCategoriesNullableWithAggregatesFilter = {
    equals?: Categories | null
    in?: Enumerable<Categories> | null
    notIn?: Enumerable<Categories> | null
    not?: NestedEnumCategoriesNullableWithAggregatesFilter | Categories | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCategoriesNullableFilter
    _max?: NestedEnumCategoriesNullableFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DonationCountOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    displayTimeSeconds?: SortOrder
    subaddress?: SortOrder
    confirmations?: SortOrder
    giphyUrl?: SortOrder
    donor?: SortOrder
    timestamp?: SortOrder
  }

  export type DonationAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    displayTimeSeconds?: SortOrder
    confirmations?: SortOrder
  }

  export type DonationMaxOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    displayTimeSeconds?: SortOrder
    subaddress?: SortOrder
    confirmations?: SortOrder
    giphyUrl?: SortOrder
    donor?: SortOrder
    timestamp?: SortOrder
  }

  export type DonationMinOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    amount?: SortOrder
    message?: SortOrder
    displayTimeSeconds?: SortOrder
    subaddress?: SortOrder
    confirmations?: SortOrder
    giphyUrl?: SortOrder
    donor?: SortOrder
    timestamp?: SortOrder
  }

  export type DonationSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    displayTimeSeconds?: SortOrder
    confirmations?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type Donation_settingsCountOrderByAggregateInput = {
    streamer?: SortOrder
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
    goalReached?: SortOrder
  }

  export type Donation_settingsAvgOrderByAggregateInput = {
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
  }

  export type Donation_settingsMaxOrderByAggregateInput = {
    streamer?: SortOrder
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
    goalReached?: SortOrder
  }

  export type Donation_settingsMinOrderByAggregateInput = {
    streamer?: SortOrder
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
    goalReached?: SortOrder
  }

  export type Donation_settingsSumOrderByAggregateInput = {
    secondPrice?: SortOrder
    charPrice?: SortOrder
    charLimit?: SortOrder
    minAmount?: SortOrder
    gifsMinAmount?: SortOrder
    goal?: SortOrder
    goalProgress?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type EnumPlan_typesNullableFilter = {
    equals?: Plan_types | null
    in?: Enumerable<Plan_types> | null
    notIn?: Enumerable<Plan_types> | null
    not?: NestedEnumPlan_typesNullableFilter | Plan_types | null
  }

  export type EnumPaid_statusesNullableFilter = {
    equals?: Paid_statuses | null
    in?: Enumerable<Paid_statuses> | null
    notIn?: Enumerable<Paid_statuses> | null
    not?: NestedEnumPaid_statusesNullableFilter | Paid_statuses | null
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    planType?: SortOrder
    paidStatus?: SortOrder
    subaddress?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    planType?: SortOrder
    paidStatus?: SortOrder
    subaddress?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    streamer?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    planType?: SortOrder
    paidStatus?: SortOrder
    subaddress?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumPlan_typesNullableWithAggregatesFilter = {
    equals?: Plan_types | null
    in?: Enumerable<Plan_types> | null
    notIn?: Enumerable<Plan_types> | null
    not?: NestedEnumPlan_typesNullableWithAggregatesFilter | Plan_types | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPlan_typesNullableFilter
    _max?: NestedEnumPlan_typesNullableFilter
  }

  export type EnumPaid_statusesNullableWithAggregatesFilter = {
    equals?: Paid_statuses | null
    in?: Enumerable<Paid_statuses> | null
    notIn?: Enumerable<Paid_statuses> | null
    not?: NestedEnumPaid_statusesNullableWithAggregatesFilter | Paid_statuses | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPaid_statusesNullableFilter
    _max?: NestedEnumPaid_statusesNullableFilter
  }

  export type EnumPlatformsNullableFilter = {
    equals?: Platforms | null
    in?: Enumerable<Platforms> | null
    notIn?: Enumerable<Platforms> | null
    not?: NestedEnumPlatformsNullableFilter | Platforms | null
  }

  export type EnumLanguagesNullableFilter = {
    equals?: Languages | null
    in?: Enumerable<Languages> | null
    notIn?: Enumerable<Languages> | null
    not?: NestedEnumLanguagesNullableFilter | Languages | null
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type StreamCountOrderByAggregateInput = {
    streamer?: SortOrder
    url?: SortOrder
    platform?: SortOrder
    language?: SortOrder
    category?: SortOrder
  }

  export type StreamAvgOrderByAggregateInput = {
    category?: SortOrder
  }

  export type StreamMaxOrderByAggregateInput = {
    streamer?: SortOrder
    url?: SortOrder
    platform?: SortOrder
    language?: SortOrder
    category?: SortOrder
  }

  export type StreamMinOrderByAggregateInput = {
    streamer?: SortOrder
    url?: SortOrder
    platform?: SortOrder
    language?: SortOrder
    category?: SortOrder
  }

  export type StreamSumOrderByAggregateInput = {
    category?: SortOrder
  }

  export type EnumPlatformsNullableWithAggregatesFilter = {
    equals?: Platforms | null
    in?: Enumerable<Platforms> | null
    notIn?: Enumerable<Platforms> | null
    not?: NestedEnumPlatformsNullableWithAggregatesFilter | Platforms | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPlatformsNullableFilter
    _max?: NestedEnumPlatformsNullableFilter
  }

  export type EnumLanguagesNullableWithAggregatesFilter = {
    equals?: Languages | null
    in?: Enumerable<Languages> | null
    notIn?: Enumerable<Languages> | null
    not?: NestedEnumLanguagesNullableWithAggregatesFilter | Languages | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLanguagesNullableFilter
    _max?: NestedEnumLanguagesNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type AnimationListRelationFilter = {
    every?: AnimationWhereInput
    some?: AnimationWhereInput
    none?: AnimationWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type DonationListRelationFilter = {
    every?: DonationWhereInput
    some?: DonationWhereInput
    none?: DonationWhereInput
  }

  export type Donation_settingsRelationFilter = {
    is?: Donation_settingsWhereInput | null
    isNot?: Donation_settingsWhereInput | null
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type StreamRelationFilter = {
    is?: StreamWhereInput | null
    isNot?: StreamWhereInput | null
  }

  export type WalletRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type AnimationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DonationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StreamerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    socket?: SortOrder
    updatedAt?: SortOrder
    isOnline?: SortOrder
    status?: SortOrder
  }

  export type StreamerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    socket?: SortOrder
    updatedAt?: SortOrder
    isOnline?: SortOrder
    status?: SortOrder
  }

  export type StreamerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    alias?: SortOrder
    socket?: SortOrder
    updatedAt?: SortOrder
    isOnline?: SortOrder
    status?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type WalletCountOrderByAggregateInput = {
    streamer?: SortOrder
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    streamer?: SortOrder
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    streamer?: SortOrder
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    restoreHeight?: SortOrder
    lastSyncHeight?: SortOrder
  }

  export type StreamerCreateNestedOneWithoutAccountInput = {
    create?: XOR<StreamerCreateWithoutAccountInput, StreamerUncheckedCreateWithoutAccountInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutAccountInput
    connect?: StreamerWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumStatusesFieldUpdateOperationsInput = {
    set?: Statuses | null
  }

  export type StreamerUpdateOneRequiredWithoutAccountInput = {
    create?: XOR<StreamerCreateWithoutAccountInput, StreamerUncheckedCreateWithoutAccountInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutAccountInput
    upsert?: StreamerUpsertWithoutAccountInput
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutAccountInput, StreamerUncheckedUpdateWithoutAccountInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type StreamerCreateNestedOneWithoutAnimationInput = {
    create?: XOR<StreamerCreateWithoutAnimationInput, StreamerUncheckedCreateWithoutAnimationInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutAnimationInput
    connect?: StreamerWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StreamerUpdateOneWithoutAnimationInput = {
    create?: XOR<StreamerCreateWithoutAnimationInput, StreamerUncheckedCreateWithoutAnimationInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutAnimationInput
    upsert?: StreamerUpsertWithoutAnimationInput
    disconnect?: boolean
    delete?: boolean
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutAnimationInput, StreamerUncheckedUpdateWithoutAnimationInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StreamerCreateNestedOneWithoutCategoryInput = {
    create?: XOR<StreamerCreateWithoutCategoryInput, StreamerUncheckedCreateWithoutCategoryInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutCategoryInput
    connect?: StreamerWhereUniqueInput
  }

  export type StreamCreateNestedManyWithoutCategory_categoryTostreamInput = {
    create?: XOR<Enumerable<StreamCreateWithoutCategory_categoryTostreamInput>, Enumerable<StreamUncheckedCreateWithoutCategory_categoryTostreamInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutCategory_categoryTostreamInput>
    createMany?: StreamCreateManyCategory_categoryTostreamInputEnvelope
    connect?: Enumerable<StreamWhereUniqueInput>
  }

  export type StreamUncheckedCreateNestedManyWithoutCategory_categoryTostreamInput = {
    create?: XOR<Enumerable<StreamCreateWithoutCategory_categoryTostreamInput>, Enumerable<StreamUncheckedCreateWithoutCategory_categoryTostreamInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutCategory_categoryTostreamInput>
    createMany?: StreamCreateManyCategory_categoryTostreamInputEnvelope
    connect?: Enumerable<StreamWhereUniqueInput>
  }

  export type NullableEnumCategoriesFieldUpdateOperationsInput = {
    set?: Categories | null
  }

  export type StreamerUpdateOneWithoutCategoryInput = {
    create?: XOR<StreamerCreateWithoutCategoryInput, StreamerUncheckedCreateWithoutCategoryInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutCategoryInput
    upsert?: StreamerUpsertWithoutCategoryInput
    disconnect?: boolean
    delete?: boolean
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutCategoryInput, StreamerUncheckedUpdateWithoutCategoryInput>
  }

  export type StreamUpdateManyWithoutCategory_categoryTostreamInput = {
    create?: XOR<Enumerable<StreamCreateWithoutCategory_categoryTostreamInput>, Enumerable<StreamUncheckedCreateWithoutCategory_categoryTostreamInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutCategory_categoryTostreamInput>
    upsert?: Enumerable<StreamUpsertWithWhereUniqueWithoutCategory_categoryTostreamInput>
    createMany?: StreamCreateManyCategory_categoryTostreamInputEnvelope
    set?: Enumerable<StreamWhereUniqueInput>
    disconnect?: Enumerable<StreamWhereUniqueInput>
    delete?: Enumerable<StreamWhereUniqueInput>
    connect?: Enumerable<StreamWhereUniqueInput>
    update?: Enumerable<StreamUpdateWithWhereUniqueWithoutCategory_categoryTostreamInput>
    updateMany?: Enumerable<StreamUpdateManyWithWhereWithoutCategory_categoryTostreamInput>
    deleteMany?: Enumerable<StreamScalarWhereInput>
  }

  export type StreamUncheckedUpdateManyWithoutCategory_categoryTostreamInput = {
    create?: XOR<Enumerable<StreamCreateWithoutCategory_categoryTostreamInput>, Enumerable<StreamUncheckedCreateWithoutCategory_categoryTostreamInput>>
    connectOrCreate?: Enumerable<StreamCreateOrConnectWithoutCategory_categoryTostreamInput>
    upsert?: Enumerable<StreamUpsertWithWhereUniqueWithoutCategory_categoryTostreamInput>
    createMany?: StreamCreateManyCategory_categoryTostreamInputEnvelope
    set?: Enumerable<StreamWhereUniqueInput>
    disconnect?: Enumerable<StreamWhereUniqueInput>
    delete?: Enumerable<StreamWhereUniqueInput>
    connect?: Enumerable<StreamWhereUniqueInput>
    update?: Enumerable<StreamUpdateWithWhereUniqueWithoutCategory_categoryTostreamInput>
    updateMany?: Enumerable<StreamUpdateManyWithWhereWithoutCategory_categoryTostreamInput>
    deleteMany?: Enumerable<StreamScalarWhereInput>
  }

  export type StreamerCreateNestedOneWithoutDonationInput = {
    create?: XOR<StreamerCreateWithoutDonationInput, StreamerUncheckedCreateWithoutDonationInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutDonationInput
    connect?: StreamerWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StreamerUpdateOneWithoutDonationInput = {
    create?: XOR<StreamerCreateWithoutDonationInput, StreamerUncheckedCreateWithoutDonationInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutDonationInput
    upsert?: StreamerUpsertWithoutDonationInput
    disconnect?: boolean
    delete?: boolean
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutDonationInput, StreamerUncheckedUpdateWithoutDonationInput>
  }

  export type StreamerCreateNestedOneWithoutDonationSettingsInput = {
    create?: XOR<StreamerCreateWithoutDonationSettingsInput, StreamerUncheckedCreateWithoutDonationSettingsInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutDonationSettingsInput
    connect?: StreamerWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type StreamerUpdateOneRequiredWithoutDonationSettingsInput = {
    create?: XOR<StreamerCreateWithoutDonationSettingsInput, StreamerUncheckedCreateWithoutDonationSettingsInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutDonationSettingsInput
    upsert?: StreamerUpsertWithoutDonationSettingsInput
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutDonationSettingsInput, StreamerUncheckedUpdateWithoutDonationSettingsInput>
  }

  export type StreamerCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<StreamerCreateWithoutInvoiceInput, StreamerUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutInvoiceInput
    connect?: StreamerWhereUniqueInput
  }

  export type NullableEnumPlan_typesFieldUpdateOperationsInput = {
    set?: Plan_types | null
  }

  export type NullableEnumPaid_statusesFieldUpdateOperationsInput = {
    set?: Paid_statuses | null
  }

  export type StreamerUpdateOneWithoutInvoiceInput = {
    create?: XOR<StreamerCreateWithoutInvoiceInput, StreamerUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutInvoiceInput
    upsert?: StreamerUpsertWithoutInvoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutInvoiceInput, StreamerUncheckedUpdateWithoutInvoiceInput>
  }

  export type CategoryCreateNestedOneWithoutStreamInput = {
    create?: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamInput
    connect?: CategoryWhereUniqueInput
  }

  export type StreamerCreateNestedOneWithoutStreamInput = {
    create?: XOR<StreamerCreateWithoutStreamInput, StreamerUncheckedCreateWithoutStreamInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutStreamInput
    connect?: StreamerWhereUniqueInput
  }

  export type NullableEnumPlatformsFieldUpdateOperationsInput = {
    set?: Platforms | null
  }

  export type NullableEnumLanguagesFieldUpdateOperationsInput = {
    set?: Languages | null
  }

  export type CategoryUpdateOneWithoutStreamInput = {
    create?: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamInput
    upsert?: CategoryUpsertWithoutStreamInput
    disconnect?: boolean
    delete?: boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutStreamInput, CategoryUncheckedUpdateWithoutStreamInput>
  }

  export type StreamerUpdateOneRequiredWithoutStreamInput = {
    create?: XOR<StreamerCreateWithoutStreamInput, StreamerUncheckedCreateWithoutStreamInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutStreamInput
    upsert?: StreamerUpsertWithoutStreamInput
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutStreamInput, StreamerUncheckedUpdateWithoutStreamInput>
  }

  export type AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput = {
    create?: XOR<Enumerable<AnimationCreateWithoutStreamer_animationTostreamerInput>, Enumerable<AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput>>
    connectOrCreate?: Enumerable<AnimationCreateOrConnectWithoutStreamer_animationTostreamerInput>
    createMany?: AnimationCreateManyStreamer_animationTostreamerInputEnvelope
    connect?: Enumerable<AnimationWhereUniqueInput>
  }

  export type CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutStreamer_categoryTostreamerInput>, Enumerable<CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutStreamer_categoryTostreamerInput>
    createMany?: CategoryCreateManyStreamer_categoryTostreamerInputEnvelope
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type DonationCreateNestedManyWithoutStreamer_donationTostreamerInput = {
    create?: XOR<Enumerable<DonationCreateWithoutStreamer_donationTostreamerInput>, Enumerable<DonationUncheckedCreateWithoutStreamer_donationTostreamerInput>>
    connectOrCreate?: Enumerable<DonationCreateOrConnectWithoutStreamer_donationTostreamerInput>
    createMany?: DonationCreateManyStreamer_donationTostreamerInputEnvelope
    connect?: Enumerable<DonationWhereUniqueInput>
  }

  export type Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput = {
    create?: XOR<Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput>
    connectOrCreate?: Donation_settingsCreateOrConnectWithoutStreamer_donation_settingsTostreamerInput
    connect?: Donation_settingsWhereUniqueInput
  }

  export type InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutStreamer_invoiceTostreamerInput>, Enumerable<InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutStreamer_invoiceTostreamerInput>
    createMany?: InvoiceCreateManyStreamer_invoiceTostreamerInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type StreamCreateNestedOneWithoutStreamer_streamTostreamerInput = {
    create?: XOR<StreamCreateWithoutStreamer_streamTostreamerInput, StreamUncheckedCreateWithoutStreamer_streamTostreamerInput>
    connectOrCreate?: StreamCreateOrConnectWithoutStreamer_streamTostreamerInput
    connect?: StreamWhereUniqueInput
  }

  export type WalletCreateNestedOneWithoutStreamer_streamerTowalletInput = {
    create?: XOR<WalletCreateWithoutStreamer_streamerTowalletInput, WalletUncheckedCreateWithoutStreamer_streamerTowalletInput>
    connectOrCreate?: WalletCreateOrConnectWithoutStreamer_streamerTowalletInput
    connect?: WalletWhereUniqueInput
  }

  export type AccountCreateNestedManyWithoutStreamer_accountTostreamerInput = {
    create?: XOR<Enumerable<AccountCreateWithoutStreamer_accountTostreamerInput>, Enumerable<AccountUncheckedCreateWithoutStreamer_accountTostreamerInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutStreamer_accountTostreamerInput>
    createMany?: AccountCreateManyStreamer_accountTostreamerInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput = {
    create?: XOR<Enumerable<AnimationCreateWithoutStreamer_animationTostreamerInput>, Enumerable<AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput>>
    connectOrCreate?: Enumerable<AnimationCreateOrConnectWithoutStreamer_animationTostreamerInput>
    createMany?: AnimationCreateManyStreamer_animationTostreamerInputEnvelope
    connect?: Enumerable<AnimationWhereUniqueInput>
  }

  export type CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutStreamer_categoryTostreamerInput>, Enumerable<CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutStreamer_categoryTostreamerInput>
    createMany?: CategoryCreateManyStreamer_categoryTostreamerInputEnvelope
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput = {
    create?: XOR<Enumerable<DonationCreateWithoutStreamer_donationTostreamerInput>, Enumerable<DonationUncheckedCreateWithoutStreamer_donationTostreamerInput>>
    connectOrCreate?: Enumerable<DonationCreateOrConnectWithoutStreamer_donationTostreamerInput>
    createMany?: DonationCreateManyStreamer_donationTostreamerInputEnvelope
    connect?: Enumerable<DonationWhereUniqueInput>
  }

  export type Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput = {
    create?: XOR<Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput>
    connectOrCreate?: Donation_settingsCreateOrConnectWithoutStreamer_donation_settingsTostreamerInput
    connect?: Donation_settingsWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutStreamer_invoiceTostreamerInput>, Enumerable<InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutStreamer_invoiceTostreamerInput>
    createMany?: InvoiceCreateManyStreamer_invoiceTostreamerInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput = {
    create?: XOR<StreamCreateWithoutStreamer_streamTostreamerInput, StreamUncheckedCreateWithoutStreamer_streamTostreamerInput>
    connectOrCreate?: StreamCreateOrConnectWithoutStreamer_streamTostreamerInput
    connect?: StreamWhereUniqueInput
  }

  export type WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput = {
    create?: XOR<WalletCreateWithoutStreamer_streamerTowalletInput, WalletUncheckedCreateWithoutStreamer_streamerTowalletInput>
    connectOrCreate?: WalletCreateOrConnectWithoutStreamer_streamerTowalletInput
    connect?: WalletWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput = {
    create?: XOR<Enumerable<AccountCreateWithoutStreamer_accountTostreamerInput>, Enumerable<AccountUncheckedCreateWithoutStreamer_accountTostreamerInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutStreamer_accountTostreamerInput>
    createMany?: AccountCreateManyStreamer_accountTostreamerInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AnimationUpdateManyWithoutStreamer_animationTostreamerInput = {
    create?: XOR<Enumerable<AnimationCreateWithoutStreamer_animationTostreamerInput>, Enumerable<AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput>>
    connectOrCreate?: Enumerable<AnimationCreateOrConnectWithoutStreamer_animationTostreamerInput>
    upsert?: Enumerable<AnimationUpsertWithWhereUniqueWithoutStreamer_animationTostreamerInput>
    createMany?: AnimationCreateManyStreamer_animationTostreamerInputEnvelope
    set?: Enumerable<AnimationWhereUniqueInput>
    disconnect?: Enumerable<AnimationWhereUniqueInput>
    delete?: Enumerable<AnimationWhereUniqueInput>
    connect?: Enumerable<AnimationWhereUniqueInput>
    update?: Enumerable<AnimationUpdateWithWhereUniqueWithoutStreamer_animationTostreamerInput>
    updateMany?: Enumerable<AnimationUpdateManyWithWhereWithoutStreamer_animationTostreamerInput>
    deleteMany?: Enumerable<AnimationScalarWhereInput>
  }

  export type CategoryUpdateManyWithoutStreamer_categoryTostreamerInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutStreamer_categoryTostreamerInput>, Enumerable<CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutStreamer_categoryTostreamerInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutStreamer_categoryTostreamerInput>
    createMany?: CategoryCreateManyStreamer_categoryTostreamerInputEnvelope
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutStreamer_categoryTostreamerInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutStreamer_categoryTostreamerInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type DonationUpdateManyWithoutStreamer_donationTostreamerInput = {
    create?: XOR<Enumerable<DonationCreateWithoutStreamer_donationTostreamerInput>, Enumerable<DonationUncheckedCreateWithoutStreamer_donationTostreamerInput>>
    connectOrCreate?: Enumerable<DonationCreateOrConnectWithoutStreamer_donationTostreamerInput>
    upsert?: Enumerable<DonationUpsertWithWhereUniqueWithoutStreamer_donationTostreamerInput>
    createMany?: DonationCreateManyStreamer_donationTostreamerInputEnvelope
    set?: Enumerable<DonationWhereUniqueInput>
    disconnect?: Enumerable<DonationWhereUniqueInput>
    delete?: Enumerable<DonationWhereUniqueInput>
    connect?: Enumerable<DonationWhereUniqueInput>
    update?: Enumerable<DonationUpdateWithWhereUniqueWithoutStreamer_donationTostreamerInput>
    updateMany?: Enumerable<DonationUpdateManyWithWhereWithoutStreamer_donationTostreamerInput>
    deleteMany?: Enumerable<DonationScalarWhereInput>
  }

  export type Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput = {
    create?: XOR<Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput>
    connectOrCreate?: Donation_settingsCreateOrConnectWithoutStreamer_donation_settingsTostreamerInput
    upsert?: Donation_settingsUpsertWithoutStreamer_donation_settingsTostreamerInput
    disconnect?: boolean
    delete?: boolean
    connect?: Donation_settingsWhereUniqueInput
    update?: XOR<Donation_settingsUpdateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedUpdateWithoutStreamer_donation_settingsTostreamerInput>
  }

  export type InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutStreamer_invoiceTostreamerInput>, Enumerable<InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutStreamer_invoiceTostreamerInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutStreamer_invoiceTostreamerInput>
    createMany?: InvoiceCreateManyStreamer_invoiceTostreamerInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutStreamer_invoiceTostreamerInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutStreamer_invoiceTostreamerInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type StreamUpdateOneWithoutStreamer_streamTostreamerInput = {
    create?: XOR<StreamCreateWithoutStreamer_streamTostreamerInput, StreamUncheckedCreateWithoutStreamer_streamTostreamerInput>
    connectOrCreate?: StreamCreateOrConnectWithoutStreamer_streamTostreamerInput
    upsert?: StreamUpsertWithoutStreamer_streamTostreamerInput
    disconnect?: boolean
    delete?: boolean
    connect?: StreamWhereUniqueInput
    update?: XOR<StreamUpdateWithoutStreamer_streamTostreamerInput, StreamUncheckedUpdateWithoutStreamer_streamTostreamerInput>
  }

  export type WalletUpdateOneWithoutStreamer_streamerTowalletInput = {
    create?: XOR<WalletCreateWithoutStreamer_streamerTowalletInput, WalletUncheckedCreateWithoutStreamer_streamerTowalletInput>
    connectOrCreate?: WalletCreateOrConnectWithoutStreamer_streamerTowalletInput
    upsert?: WalletUpsertWithoutStreamer_streamerTowalletInput
    disconnect?: boolean
    delete?: boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<WalletUpdateWithoutStreamer_streamerTowalletInput, WalletUncheckedUpdateWithoutStreamer_streamerTowalletInput>
  }

  export type AccountUpdateManyWithoutStreamer_accountTostreamerInput = {
    create?: XOR<Enumerable<AccountCreateWithoutStreamer_accountTostreamerInput>, Enumerable<AccountUncheckedCreateWithoutStreamer_accountTostreamerInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutStreamer_accountTostreamerInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutStreamer_accountTostreamerInput>
    createMany?: AccountCreateManyStreamer_accountTostreamerInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutStreamer_accountTostreamerInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutStreamer_accountTostreamerInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput = {
    create?: XOR<Enumerable<AnimationCreateWithoutStreamer_animationTostreamerInput>, Enumerable<AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput>>
    connectOrCreate?: Enumerable<AnimationCreateOrConnectWithoutStreamer_animationTostreamerInput>
    upsert?: Enumerable<AnimationUpsertWithWhereUniqueWithoutStreamer_animationTostreamerInput>
    createMany?: AnimationCreateManyStreamer_animationTostreamerInputEnvelope
    set?: Enumerable<AnimationWhereUniqueInput>
    disconnect?: Enumerable<AnimationWhereUniqueInput>
    delete?: Enumerable<AnimationWhereUniqueInput>
    connect?: Enumerable<AnimationWhereUniqueInput>
    update?: Enumerable<AnimationUpdateWithWhereUniqueWithoutStreamer_animationTostreamerInput>
    updateMany?: Enumerable<AnimationUpdateManyWithWhereWithoutStreamer_animationTostreamerInput>
    deleteMany?: Enumerable<AnimationScalarWhereInput>
  }

  export type CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutStreamer_categoryTostreamerInput>, Enumerable<CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutStreamer_categoryTostreamerInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutStreamer_categoryTostreamerInput>
    createMany?: CategoryCreateManyStreamer_categoryTostreamerInputEnvelope
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutStreamer_categoryTostreamerInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutStreamer_categoryTostreamerInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput = {
    create?: XOR<Enumerable<DonationCreateWithoutStreamer_donationTostreamerInput>, Enumerable<DonationUncheckedCreateWithoutStreamer_donationTostreamerInput>>
    connectOrCreate?: Enumerable<DonationCreateOrConnectWithoutStreamer_donationTostreamerInput>
    upsert?: Enumerable<DonationUpsertWithWhereUniqueWithoutStreamer_donationTostreamerInput>
    createMany?: DonationCreateManyStreamer_donationTostreamerInputEnvelope
    set?: Enumerable<DonationWhereUniqueInput>
    disconnect?: Enumerable<DonationWhereUniqueInput>
    delete?: Enumerable<DonationWhereUniqueInput>
    connect?: Enumerable<DonationWhereUniqueInput>
    update?: Enumerable<DonationUpdateWithWhereUniqueWithoutStreamer_donationTostreamerInput>
    updateMany?: Enumerable<DonationUpdateManyWithWhereWithoutStreamer_donationTostreamerInput>
    deleteMany?: Enumerable<DonationScalarWhereInput>
  }

  export type Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput = {
    create?: XOR<Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput>
    connectOrCreate?: Donation_settingsCreateOrConnectWithoutStreamer_donation_settingsTostreamerInput
    upsert?: Donation_settingsUpsertWithoutStreamer_donation_settingsTostreamerInput
    disconnect?: boolean
    delete?: boolean
    connect?: Donation_settingsWhereUniqueInput
    update?: XOR<Donation_settingsUpdateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedUpdateWithoutStreamer_donation_settingsTostreamerInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutStreamer_invoiceTostreamerInput>, Enumerable<InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutStreamer_invoiceTostreamerInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutStreamer_invoiceTostreamerInput>
    createMany?: InvoiceCreateManyStreamer_invoiceTostreamerInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutStreamer_invoiceTostreamerInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutStreamer_invoiceTostreamerInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput = {
    create?: XOR<StreamCreateWithoutStreamer_streamTostreamerInput, StreamUncheckedCreateWithoutStreamer_streamTostreamerInput>
    connectOrCreate?: StreamCreateOrConnectWithoutStreamer_streamTostreamerInput
    upsert?: StreamUpsertWithoutStreamer_streamTostreamerInput
    disconnect?: boolean
    delete?: boolean
    connect?: StreamWhereUniqueInput
    update?: XOR<StreamUpdateWithoutStreamer_streamTostreamerInput, StreamUncheckedUpdateWithoutStreamer_streamTostreamerInput>
  }

  export type WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput = {
    create?: XOR<WalletCreateWithoutStreamer_streamerTowalletInput, WalletUncheckedCreateWithoutStreamer_streamerTowalletInput>
    connectOrCreate?: WalletCreateOrConnectWithoutStreamer_streamerTowalletInput
    upsert?: WalletUpsertWithoutStreamer_streamerTowalletInput
    disconnect?: boolean
    delete?: boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<WalletUpdateWithoutStreamer_streamerTowalletInput, WalletUncheckedUpdateWithoutStreamer_streamerTowalletInput>
  }

  export type AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput = {
    create?: XOR<Enumerable<AccountCreateWithoutStreamer_accountTostreamerInput>, Enumerable<AccountUncheckedCreateWithoutStreamer_accountTostreamerInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutStreamer_accountTostreamerInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutStreamer_accountTostreamerInput>
    createMany?: AccountCreateManyStreamer_accountTostreamerInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutStreamer_accountTostreamerInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutStreamer_accountTostreamerInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type StreamerCreateNestedOneWithoutWalletInput = {
    create?: XOR<StreamerCreateWithoutWalletInput, StreamerUncheckedCreateWithoutWalletInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutWalletInput
    connect?: StreamerWhereUniqueInput
  }

  export type StreamerUpdateOneRequiredWithoutWalletInput = {
    create?: XOR<StreamerCreateWithoutWalletInput, StreamerUncheckedCreateWithoutWalletInput>
    connectOrCreate?: StreamerCreateOrConnectWithoutWalletInput
    upsert?: StreamerUpsertWithoutWalletInput
    connect?: StreamerWhereUniqueInput
    update?: XOR<StreamerUpdateWithoutWalletInput, StreamerUncheckedUpdateWithoutWalletInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumStatusesNullableFilter = {
    equals?: Statuses | null
    in?: Enumerable<Statuses> | null
    notIn?: Enumerable<Statuses> | null
    not?: NestedEnumStatusesNullableFilter | Statuses | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumStatusesNullableWithAggregatesFilter = {
    equals?: Statuses | null
    in?: Enumerable<Statuses> | null
    notIn?: Enumerable<Statuses> | null
    not?: NestedEnumStatusesNullableWithAggregatesFilter | Statuses | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumStatusesNullableFilter
    _max?: NestedEnumStatusesNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumCategoriesNullableFilter = {
    equals?: Categories | null
    in?: Enumerable<Categories> | null
    notIn?: Enumerable<Categories> | null
    not?: NestedEnumCategoriesNullableFilter | Categories | null
  }

  export type NestedEnumCategoriesNullableWithAggregatesFilter = {
    equals?: Categories | null
    in?: Enumerable<Categories> | null
    notIn?: Enumerable<Categories> | null
    not?: NestedEnumCategoriesNullableWithAggregatesFilter | Categories | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCategoriesNullableFilter
    _max?: NestedEnumCategoriesNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedEnumPlan_typesNullableFilter = {
    equals?: Plan_types | null
    in?: Enumerable<Plan_types> | null
    notIn?: Enumerable<Plan_types> | null
    not?: NestedEnumPlan_typesNullableFilter | Plan_types | null
  }

  export type NestedEnumPaid_statusesNullableFilter = {
    equals?: Paid_statuses | null
    in?: Enumerable<Paid_statuses> | null
    notIn?: Enumerable<Paid_statuses> | null
    not?: NestedEnumPaid_statusesNullableFilter | Paid_statuses | null
  }

  export type NestedEnumPlan_typesNullableWithAggregatesFilter = {
    equals?: Plan_types | null
    in?: Enumerable<Plan_types> | null
    notIn?: Enumerable<Plan_types> | null
    not?: NestedEnumPlan_typesNullableWithAggregatesFilter | Plan_types | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPlan_typesNullableFilter
    _max?: NestedEnumPlan_typesNullableFilter
  }

  export type NestedEnumPaid_statusesNullableWithAggregatesFilter = {
    equals?: Paid_statuses | null
    in?: Enumerable<Paid_statuses> | null
    notIn?: Enumerable<Paid_statuses> | null
    not?: NestedEnumPaid_statusesNullableWithAggregatesFilter | Paid_statuses | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPaid_statusesNullableFilter
    _max?: NestedEnumPaid_statusesNullableFilter
  }

  export type NestedEnumPlatformsNullableFilter = {
    equals?: Platforms | null
    in?: Enumerable<Platforms> | null
    notIn?: Enumerable<Platforms> | null
    not?: NestedEnumPlatformsNullableFilter | Platforms | null
  }

  export type NestedEnumLanguagesNullableFilter = {
    equals?: Languages | null
    in?: Enumerable<Languages> | null
    notIn?: Enumerable<Languages> | null
    not?: NestedEnumLanguagesNullableFilter | Languages | null
  }

  export type NestedEnumPlatformsNullableWithAggregatesFilter = {
    equals?: Platforms | null
    in?: Enumerable<Platforms> | null
    notIn?: Enumerable<Platforms> | null
    not?: NestedEnumPlatformsNullableWithAggregatesFilter | Platforms | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPlatformsNullableFilter
    _max?: NestedEnumPlatformsNullableFilter
  }

  export type NestedEnumLanguagesNullableWithAggregatesFilter = {
    equals?: Languages | null
    in?: Enumerable<Languages> | null
    notIn?: Enumerable<Languages> | null
    not?: NestedEnumLanguagesNullableWithAggregatesFilter | Languages | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumLanguagesNullableFilter
    _max?: NestedEnumLanguagesNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StreamerCreateWithoutAccountInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
  }

  export type StreamerUncheckedCreateWithoutAccountInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
  }

  export type StreamerCreateOrConnectWithoutAccountInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutAccountInput, StreamerUncheckedCreateWithoutAccountInput>
  }

  export type StreamerUpsertWithoutAccountInput = {
    update: XOR<StreamerUpdateWithoutAccountInput, StreamerUncheckedUpdateWithoutAccountInput>
    create: XOR<StreamerCreateWithoutAccountInput, StreamerUncheckedCreateWithoutAccountInput>
  }

  export type StreamerUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
  }

  export type StreamerUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
  }

  export type StreamerCreateWithoutAnimationInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutAnimationInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutAnimationInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutAnimationInput, StreamerUncheckedCreateWithoutAnimationInput>
  }

  export type StreamerUpsertWithoutAnimationInput = {
    update: XOR<StreamerUpdateWithoutAnimationInput, StreamerUncheckedUpdateWithoutAnimationInput>
    create: XOR<StreamerCreateWithoutAnimationInput, StreamerUncheckedCreateWithoutAnimationInput>
  }

  export type StreamerUpdateWithoutAnimationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutAnimationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateWithoutCategoryInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutCategoryInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutCategoryInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutCategoryInput, StreamerUncheckedCreateWithoutCategoryInput>
  }

  export type StreamCreateWithoutCategory_categoryTostreamInput = {
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
    streamer_streamTostreamer: StreamerCreateNestedOneWithoutStreamInput
  }

  export type StreamUncheckedCreateWithoutCategory_categoryTostreamInput = {
    streamer: string
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
  }

  export type StreamCreateOrConnectWithoutCategory_categoryTostreamInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutCategory_categoryTostreamInput, StreamUncheckedCreateWithoutCategory_categoryTostreamInput>
  }

  export type StreamCreateManyCategory_categoryTostreamInputEnvelope = {
    data: Enumerable<StreamCreateManyCategory_categoryTostreamInput>
    skipDuplicates?: boolean
  }

  export type StreamerUpsertWithoutCategoryInput = {
    update: XOR<StreamerUpdateWithoutCategoryInput, StreamerUncheckedUpdateWithoutCategoryInput>
    create: XOR<StreamerCreateWithoutCategoryInput, StreamerUncheckedCreateWithoutCategoryInput>
  }

  export type StreamerUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamUpsertWithWhereUniqueWithoutCategory_categoryTostreamInput = {
    where: StreamWhereUniqueInput
    update: XOR<StreamUpdateWithoutCategory_categoryTostreamInput, StreamUncheckedUpdateWithoutCategory_categoryTostreamInput>
    create: XOR<StreamCreateWithoutCategory_categoryTostreamInput, StreamUncheckedCreateWithoutCategory_categoryTostreamInput>
  }

  export type StreamUpdateWithWhereUniqueWithoutCategory_categoryTostreamInput = {
    where: StreamWhereUniqueInput
    data: XOR<StreamUpdateWithoutCategory_categoryTostreamInput, StreamUncheckedUpdateWithoutCategory_categoryTostreamInput>
  }

  export type StreamUpdateManyWithWhereWithoutCategory_categoryTostreamInput = {
    where: StreamScalarWhereInput
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyWithoutStreamInput>
  }

  export type StreamScalarWhereInput = {
    AND?: Enumerable<StreamScalarWhereInput>
    OR?: Enumerable<StreamScalarWhereInput>
    NOT?: Enumerable<StreamScalarWhereInput>
    streamer?: StringFilter | string
    url?: StringNullableFilter | string | null
    platform?: EnumPlatformsNullableFilter | Platforms | null
    language?: EnumLanguagesNullableFilter | Languages | null
    category?: IntNullableFilter | number | null
  }

  export type StreamerCreateWithoutDonationInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutDonationInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutDonationInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutDonationInput, StreamerUncheckedCreateWithoutDonationInput>
  }

  export type StreamerUpsertWithoutDonationInput = {
    update: XOR<StreamerUpdateWithoutDonationInput, StreamerUncheckedUpdateWithoutDonationInput>
    create: XOR<StreamerCreateWithoutDonationInput, StreamerUncheckedCreateWithoutDonationInput>
  }

  export type StreamerUpdateWithoutDonationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutDonationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateWithoutDonationSettingsInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutDonationSettingsInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutDonationSettingsInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutDonationSettingsInput, StreamerUncheckedCreateWithoutDonationSettingsInput>
  }

  export type StreamerUpsertWithoutDonationSettingsInput = {
    update: XOR<StreamerUpdateWithoutDonationSettingsInput, StreamerUncheckedUpdateWithoutDonationSettingsInput>
    create: XOR<StreamerCreateWithoutDonationSettingsInput, StreamerUncheckedCreateWithoutDonationSettingsInput>
  }

  export type StreamerUpdateWithoutDonationSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutDonationSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateWithoutInvoiceInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutInvoiceInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutInvoiceInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutInvoiceInput, StreamerUncheckedCreateWithoutInvoiceInput>
  }

  export type StreamerUpsertWithoutInvoiceInput = {
    update: XOR<StreamerUpdateWithoutInvoiceInput, StreamerUncheckedUpdateWithoutInvoiceInput>
    create: XOR<StreamerCreateWithoutInvoiceInput, StreamerUncheckedCreateWithoutInvoiceInput>
  }

  export type StreamerUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type CategoryCreateWithoutStreamInput = {
    name?: Categories | null
    streamer_categoryTostreamer?: StreamerCreateNestedOneWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutStreamInput = {
    id?: number
    streamer?: string | null
    name?: Categories | null
  }

  export type CategoryCreateOrConnectWithoutStreamInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput>
  }

  export type StreamerCreateWithoutStreamInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    wallet?: WalletCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutStreamInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    wallet?: WalletUncheckedCreateNestedOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutStreamInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutStreamInput, StreamerUncheckedCreateWithoutStreamInput>
  }

  export type CategoryUpsertWithoutStreamInput = {
    update: XOR<CategoryUpdateWithoutStreamInput, CategoryUncheckedUpdateWithoutStreamInput>
    create: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput>
  }

  export type CategoryUpdateWithoutStreamInput = {
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
    streamer_categoryTostreamer?: StreamerUpdateOneWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateWithoutStreamInput = {
    id?: IntFieldUpdateOperationsInput | number
    streamer?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
  }

  export type StreamerUpsertWithoutStreamInput = {
    update: XOR<StreamerUpdateWithoutStreamInput, StreamerUncheckedUpdateWithoutStreamInput>
    create: XOR<StreamerCreateWithoutStreamInput, StreamerUncheckedCreateWithoutStreamInput>
  }

  export type StreamerUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    wallet?: WalletUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    wallet?: WalletUncheckedUpdateOneWithoutStreamer_streamerTowalletInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type AnimationCreateWithoutStreamer_animationTostreamerInput = {
    size?: number | null
    color?: string | null
  }

  export type AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput = {
    id?: number
    size?: number | null
    color?: string | null
  }

  export type AnimationCreateOrConnectWithoutStreamer_animationTostreamerInput = {
    where: AnimationWhereUniqueInput
    create: XOR<AnimationCreateWithoutStreamer_animationTostreamerInput, AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput>
  }

  export type AnimationCreateManyStreamer_animationTostreamerInputEnvelope = {
    data: Enumerable<AnimationCreateManyStreamer_animationTostreamerInput>
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutStreamer_categoryTostreamerInput = {
    name?: Categories | null
    stream?: StreamCreateNestedManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput = {
    id?: number
    name?: Categories | null
    stream?: StreamUncheckedCreateNestedManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryCreateOrConnectWithoutStreamer_categoryTostreamerInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutStreamer_categoryTostreamerInput, CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput>
  }

  export type CategoryCreateManyStreamer_categoryTostreamerInputEnvelope = {
    data: Enumerable<CategoryCreateManyStreamer_categoryTostreamerInput>
    skipDuplicates?: boolean
  }

  export type DonationCreateWithoutStreamer_donationTostreamerInput = {
    amount: number
    message?: string | null
    displayTimeSeconds?: number | null
    subaddress?: string | null
    confirmations?: number | null
    giphyUrl?: string | null
    donor?: string | null
    timestamp?: Date | string | null
  }

  export type DonationUncheckedCreateWithoutStreamer_donationTostreamerInput = {
    id?: number
    amount: number
    message?: string | null
    displayTimeSeconds?: number | null
    subaddress?: string | null
    confirmations?: number | null
    giphyUrl?: string | null
    donor?: string | null
    timestamp?: Date | string | null
  }

  export type DonationCreateOrConnectWithoutStreamer_donationTostreamerInput = {
    where: DonationWhereUniqueInput
    create: XOR<DonationCreateWithoutStreamer_donationTostreamerInput, DonationUncheckedCreateWithoutStreamer_donationTostreamerInput>
  }

  export type DonationCreateManyStreamer_donationTostreamerInputEnvelope = {
    data: Enumerable<DonationCreateManyStreamer_donationTostreamerInput>
    skipDuplicates?: boolean
  }

  export type Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput = {
    secondPrice?: number | null
    charPrice?: number | null
    charLimit?: number | null
    minAmount?: number | null
    gifsMinAmount?: number | null
    goal?: number | null
    goalProgress?: number | null
    goalReached?: boolean | null
  }

  export type Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput = {
    secondPrice?: number | null
    charPrice?: number | null
    charLimit?: number | null
    minAmount?: number | null
    gifsMinAmount?: number | null
    goal?: number | null
    goalProgress?: number | null
    goalReached?: boolean | null
  }

  export type Donation_settingsCreateOrConnectWithoutStreamer_donation_settingsTostreamerInput = {
    where: Donation_settingsWhereUniqueInput
    create: XOR<Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput>
  }

  export type InvoiceCreateWithoutStreamer_invoiceTostreamerInput = {
    startDate?: Date | string | null
    endDate?: Date | string | null
    planType?: Plan_types | null
    paidStatus?: Paid_statuses | null
    subaddress?: string | null
  }

  export type InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput = {
    id?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    planType?: Plan_types | null
    paidStatus?: Paid_statuses | null
    subaddress?: string | null
  }

  export type InvoiceCreateOrConnectWithoutStreamer_invoiceTostreamerInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutStreamer_invoiceTostreamerInput, InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput>
  }

  export type InvoiceCreateManyStreamer_invoiceTostreamerInputEnvelope = {
    data: Enumerable<InvoiceCreateManyStreamer_invoiceTostreamerInput>
    skipDuplicates?: boolean
  }

  export type StreamCreateWithoutStreamer_streamTostreamerInput = {
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
    category_categoryTostream?: CategoryCreateNestedOneWithoutStreamInput
  }

  export type StreamUncheckedCreateWithoutStreamer_streamTostreamerInput = {
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
    category?: number | null
  }

  export type StreamCreateOrConnectWithoutStreamer_streamTostreamerInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutStreamer_streamTostreamerInput, StreamUncheckedCreateWithoutStreamer_streamTostreamerInput>
  }

  export type WalletCreateWithoutStreamer_streamerTowalletInput = {
    restoreHeight?: number | null
    lastSyncHeight?: number | null
  }

  export type WalletUncheckedCreateWithoutStreamer_streamerTowalletInput = {
    restoreHeight?: number | null
    lastSyncHeight?: number | null
  }

  export type WalletCreateOrConnectWithoutStreamer_streamerTowalletInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutStreamer_streamerTowalletInput, WalletUncheckedCreateWithoutStreamer_streamerTowalletInput>
  }

  export type AccountCreateWithoutStreamer_accountTostreamerInput = {
    createdAt?: Date | string
    status?: Statuses | null
  }

  export type AccountUncheckedCreateWithoutStreamer_accountTostreamerInput = {
    createdAt?: Date | string
    status?: Statuses | null
  }

  export type AccountCreateOrConnectWithoutStreamer_accountTostreamerInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutStreamer_accountTostreamerInput, AccountUncheckedCreateWithoutStreamer_accountTostreamerInput>
  }

  export type AccountCreateManyStreamer_accountTostreamerInputEnvelope = {
    data: Enumerable<AccountCreateManyStreamer_accountTostreamerInput>
    skipDuplicates?: boolean
  }

  export type AnimationUpsertWithWhereUniqueWithoutStreamer_animationTostreamerInput = {
    where: AnimationWhereUniqueInput
    update: XOR<AnimationUpdateWithoutStreamer_animationTostreamerInput, AnimationUncheckedUpdateWithoutStreamer_animationTostreamerInput>
    create: XOR<AnimationCreateWithoutStreamer_animationTostreamerInput, AnimationUncheckedCreateWithoutStreamer_animationTostreamerInput>
  }

  export type AnimationUpdateWithWhereUniqueWithoutStreamer_animationTostreamerInput = {
    where: AnimationWhereUniqueInput
    data: XOR<AnimationUpdateWithoutStreamer_animationTostreamerInput, AnimationUncheckedUpdateWithoutStreamer_animationTostreamerInput>
  }

  export type AnimationUpdateManyWithWhereWithoutStreamer_animationTostreamerInput = {
    where: AnimationScalarWhereInput
    data: XOR<AnimationUpdateManyMutationInput, AnimationUncheckedUpdateManyWithoutAnimationInput>
  }

  export type AnimationScalarWhereInput = {
    AND?: Enumerable<AnimationScalarWhereInput>
    OR?: Enumerable<AnimationScalarWhereInput>
    NOT?: Enumerable<AnimationScalarWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    size?: IntNullableFilter | number | null
    color?: StringNullableFilter | string | null
  }

  export type CategoryUpsertWithWhereUniqueWithoutStreamer_categoryTostreamerInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutStreamer_categoryTostreamerInput, CategoryUncheckedUpdateWithoutStreamer_categoryTostreamerInput>
    create: XOR<CategoryCreateWithoutStreamer_categoryTostreamerInput, CategoryUncheckedCreateWithoutStreamer_categoryTostreamerInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutStreamer_categoryTostreamerInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutStreamer_categoryTostreamerInput, CategoryUncheckedUpdateWithoutStreamer_categoryTostreamerInput>
  }

  export type CategoryUpdateManyWithWhereWithoutStreamer_categoryTostreamerInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: Enumerable<CategoryScalarWhereInput>
    OR?: Enumerable<CategoryScalarWhereInput>
    NOT?: Enumerable<CategoryScalarWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    name?: EnumCategoriesNullableFilter | Categories | null
  }

  export type DonationUpsertWithWhereUniqueWithoutStreamer_donationTostreamerInput = {
    where: DonationWhereUniqueInput
    update: XOR<DonationUpdateWithoutStreamer_donationTostreamerInput, DonationUncheckedUpdateWithoutStreamer_donationTostreamerInput>
    create: XOR<DonationCreateWithoutStreamer_donationTostreamerInput, DonationUncheckedCreateWithoutStreamer_donationTostreamerInput>
  }

  export type DonationUpdateWithWhereUniqueWithoutStreamer_donationTostreamerInput = {
    where: DonationWhereUniqueInput
    data: XOR<DonationUpdateWithoutStreamer_donationTostreamerInput, DonationUncheckedUpdateWithoutStreamer_donationTostreamerInput>
  }

  export type DonationUpdateManyWithWhereWithoutStreamer_donationTostreamerInput = {
    where: DonationScalarWhereInput
    data: XOR<DonationUpdateManyMutationInput, DonationUncheckedUpdateManyWithoutDonationInput>
  }

  export type DonationScalarWhereInput = {
    AND?: Enumerable<DonationScalarWhereInput>
    OR?: Enumerable<DonationScalarWhereInput>
    NOT?: Enumerable<DonationScalarWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    amount?: FloatFilter | number
    message?: StringNullableFilter | string | null
    displayTimeSeconds?: IntNullableFilter | number | null
    subaddress?: StringNullableFilter | string | null
    confirmations?: IntNullableFilter | number | null
    giphyUrl?: StringNullableFilter | string | null
    donor?: StringNullableFilter | string | null
    timestamp?: DateTimeNullableFilter | Date | string | null
  }

  export type Donation_settingsUpsertWithoutStreamer_donation_settingsTostreamerInput = {
    update: XOR<Donation_settingsUpdateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedUpdateWithoutStreamer_donation_settingsTostreamerInput>
    create: XOR<Donation_settingsCreateWithoutStreamer_donation_settingsTostreamerInput, Donation_settingsUncheckedCreateWithoutStreamer_donation_settingsTostreamerInput>
  }

  export type Donation_settingsUpdateWithoutStreamer_donation_settingsTostreamerInput = {
    secondPrice?: NullableIntFieldUpdateOperationsInput | number | null
    charPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    charLimit?: NullableIntFieldUpdateOperationsInput | number | null
    minAmount?: NullableIntFieldUpdateOperationsInput | number | null
    gifsMinAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    goal?: NullableFloatFieldUpdateOperationsInput | number | null
    goalProgress?: NullableFloatFieldUpdateOperationsInput | number | null
    goalReached?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type Donation_settingsUncheckedUpdateWithoutStreamer_donation_settingsTostreamerInput = {
    secondPrice?: NullableIntFieldUpdateOperationsInput | number | null
    charPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    charLimit?: NullableIntFieldUpdateOperationsInput | number | null
    minAmount?: NullableIntFieldUpdateOperationsInput | number | null
    gifsMinAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    goal?: NullableFloatFieldUpdateOperationsInput | number | null
    goalProgress?: NullableFloatFieldUpdateOperationsInput | number | null
    goalReached?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type InvoiceUpsertWithWhereUniqueWithoutStreamer_invoiceTostreamerInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutStreamer_invoiceTostreamerInput, InvoiceUncheckedUpdateWithoutStreamer_invoiceTostreamerInput>
    create: XOR<InvoiceCreateWithoutStreamer_invoiceTostreamerInput, InvoiceUncheckedCreateWithoutStreamer_invoiceTostreamerInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutStreamer_invoiceTostreamerInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutStreamer_invoiceTostreamerInput, InvoiceUncheckedUpdateWithoutStreamer_invoiceTostreamerInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutStreamer_invoiceTostreamerInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: Enumerable<InvoiceScalarWhereInput>
    OR?: Enumerable<InvoiceScalarWhereInput>
    NOT?: Enumerable<InvoiceScalarWhereInput>
    id?: IntFilter | number
    streamer?: StringNullableFilter | string | null
    startDate?: DateTimeNullableFilter | Date | string | null
    endDate?: DateTimeNullableFilter | Date | string | null
    planType?: EnumPlan_typesNullableFilter | Plan_types | null
    paidStatus?: EnumPaid_statusesNullableFilter | Paid_statuses | null
    subaddress?: StringNullableFilter | string | null
  }

  export type StreamUpsertWithoutStreamer_streamTostreamerInput = {
    update: XOR<StreamUpdateWithoutStreamer_streamTostreamerInput, StreamUncheckedUpdateWithoutStreamer_streamTostreamerInput>
    create: XOR<StreamCreateWithoutStreamer_streamTostreamerInput, StreamUncheckedCreateWithoutStreamer_streamTostreamerInput>
  }

  export type StreamUpdateWithoutStreamer_streamTostreamerInput = {
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
    category_categoryTostream?: CategoryUpdateOneWithoutStreamInput
  }

  export type StreamUncheckedUpdateWithoutStreamer_streamTostreamerInput = {
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
    category?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WalletUpsertWithoutStreamer_streamerTowalletInput = {
    update: XOR<WalletUpdateWithoutStreamer_streamerTowalletInput, WalletUncheckedUpdateWithoutStreamer_streamerTowalletInput>
    create: XOR<WalletCreateWithoutStreamer_streamerTowalletInput, WalletUncheckedCreateWithoutStreamer_streamerTowalletInput>
  }

  export type WalletUpdateWithoutStreamer_streamerTowalletInput = {
    restoreHeight?: NullableIntFieldUpdateOperationsInput | number | null
    lastSyncHeight?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WalletUncheckedUpdateWithoutStreamer_streamerTowalletInput = {
    restoreHeight?: NullableIntFieldUpdateOperationsInput | number | null
    lastSyncHeight?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUpsertWithWhereUniqueWithoutStreamer_accountTostreamerInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutStreamer_accountTostreamerInput, AccountUncheckedUpdateWithoutStreamer_accountTostreamerInput>
    create: XOR<AccountCreateWithoutStreamer_accountTostreamerInput, AccountUncheckedCreateWithoutStreamer_accountTostreamerInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutStreamer_accountTostreamerInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutStreamer_accountTostreamerInput, AccountUncheckedUpdateWithoutStreamer_accountTostreamerInput>
  }

  export type AccountUpdateManyWithWhereWithoutStreamer_accountTostreamerInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    streamer?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    status?: EnumStatusesNullableFilter | Statuses | null
  }

  export type StreamerCreateWithoutWalletInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamCreateNestedOneWithoutStreamer_streamTostreamerInput
    Account?: AccountCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedCreateWithoutWalletInput = {
    id: string
    name: string
    alias: string
    socket?: string | null
    updatedAt?: Date | string
    isOnline?: boolean
    status?: Statuses | null
    animation?: AnimationUncheckedCreateNestedManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedCreateNestedManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedCreateNestedManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedCreateNestedOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedCreateNestedManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedCreateNestedOneWithoutStreamer_streamTostreamerInput
    Account?: AccountUncheckedCreateNestedManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerCreateOrConnectWithoutWalletInput = {
    where: StreamerWhereUniqueInput
    create: XOR<StreamerCreateWithoutWalletInput, StreamerUncheckedCreateWithoutWalletInput>
  }

  export type StreamerUpsertWithoutWalletInput = {
    update: XOR<StreamerUpdateWithoutWalletInput, StreamerUncheckedUpdateWithoutWalletInput>
    create: XOR<StreamerCreateWithoutWalletInput, StreamerUncheckedCreateWithoutWalletInput>
  }

  export type StreamerUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUpdateOneWithoutStreamer_streamTostreamerInput
    Account?: AccountUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamerUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    alias?: StringFieldUpdateOperationsInput | string
    socket?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
    animation?: AnimationUncheckedUpdateManyWithoutStreamer_animationTostreamerInput
    category?: CategoryUncheckedUpdateManyWithoutStreamer_categoryTostreamerInput
    donation?: DonationUncheckedUpdateManyWithoutStreamer_donationTostreamerInput
    donationSettings?: Donation_settingsUncheckedUpdateOneWithoutStreamer_donation_settingsTostreamerInput
    invoice?: InvoiceUncheckedUpdateManyWithoutStreamer_invoiceTostreamerInput
    stream?: StreamUncheckedUpdateOneWithoutStreamer_streamTostreamerInput
    Account?: AccountUncheckedUpdateManyWithoutStreamer_accountTostreamerInput
  }

  export type StreamCreateManyCategory_categoryTostreamInput = {
    streamer: string
    url?: string | null
    platform?: Platforms | null
    language?: Languages | null
  }

  export type StreamUpdateWithoutCategory_categoryTostreamInput = {
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
    streamer_streamTostreamer?: StreamerUpdateOneRequiredWithoutStreamInput
  }

  export type StreamUncheckedUpdateWithoutCategory_categoryTostreamInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
  }

  export type StreamUncheckedUpdateManyWithoutStreamInput = {
    streamer?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableEnumPlatformsFieldUpdateOperationsInput | Platforms | null
    language?: NullableEnumLanguagesFieldUpdateOperationsInput | Languages | null
  }

  export type AnimationCreateManyStreamer_animationTostreamerInput = {
    id?: number
    size?: number | null
    color?: string | null
  }

  export type CategoryCreateManyStreamer_categoryTostreamerInput = {
    id?: number
    name?: Categories | null
  }

  export type DonationCreateManyStreamer_donationTostreamerInput = {
    id?: number
    amount: number
    message?: string | null
    displayTimeSeconds?: number | null
    subaddress?: string | null
    confirmations?: number | null
    giphyUrl?: string | null
    donor?: string | null
    timestamp?: Date | string | null
  }

  export type InvoiceCreateManyStreamer_invoiceTostreamerInput = {
    id?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    planType?: Plan_types | null
    paidStatus?: Paid_statuses | null
    subaddress?: string | null
  }

  export type AccountCreateManyStreamer_accountTostreamerInput = {
    createdAt?: Date | string
    status?: Statuses | null
  }

  export type AnimationUpdateWithoutStreamer_animationTostreamerInput = {
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimationUncheckedUpdateWithoutStreamer_animationTostreamerInput = {
    id?: IntFieldUpdateOperationsInput | number
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimationUncheckedUpdateManyWithoutAnimationInput = {
    id?: IntFieldUpdateOperationsInput | number
    size?: NullableIntFieldUpdateOperationsInput | number | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUpdateWithoutStreamer_categoryTostreamerInput = {
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
    stream?: StreamUpdateManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryUncheckedUpdateWithoutStreamer_categoryTostreamerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
    stream?: StreamUncheckedUpdateManyWithoutCategory_categoryTostreamInput
  }

  export type CategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableEnumCategoriesFieldUpdateOperationsInput | Categories | null
  }

  export type DonationUpdateWithoutStreamer_donationTostreamerInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DonationUncheckedUpdateWithoutStreamer_donationTostreamerInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DonationUncheckedUpdateManyWithoutDonationInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    displayTimeSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
    confirmations?: NullableIntFieldUpdateOperationsInput | number | null
    giphyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    donor?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvoiceUpdateWithoutStreamer_invoiceTostreamerInput = {
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutStreamer_invoiceTostreamerInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planType?: NullableEnumPlan_typesFieldUpdateOperationsInput | Plan_types | null
    paidStatus?: NullableEnumPaid_statusesFieldUpdateOperationsInput | Paid_statuses | null
    subaddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutStreamer_accountTostreamerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type AccountUncheckedUpdateWithoutStreamer_accountTostreamerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableEnumStatusesFieldUpdateOperationsInput | Statuses | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}